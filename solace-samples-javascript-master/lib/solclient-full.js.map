{"version":3,"file":"solclient-full.js","mappings":";AAAA,UAA2CA,MAAMC;IAChD,IAAsB,aAAnB,OAAOC,WAA0C,aAAlB,OAAOC,QACxCA,OAAOD,UAAUD,QAAQ,QACrB,IAAqB,eAAlB,OAAOG,UAAyBA,OAAOC,KAC9CD,OAAO,UAAU,IAAIH,OAAO,QACxB,IAAsB,aAAnB,OAAOC,SACdA,QAAQ,YAAYD,QAAQ,QAE5BD,KAAK,YAAYC,QAAQ;AAC1B,EAAEK,MAAM;IACT;;;gBCRAH,OAAOD,UAAU,oBAAjB;;;gBCFA,MAAQK,SAAW,oBAAQ,2CAAc,EAAjCA;gBACR,MAAQC,OAAS,oBAAQ,yCAAY,EAA7BA;gBACR,MAAQC,UAAY,oBAAQ,4CAAe,EAAnCA;gBACR,MAAQC,MAAQ,oBAAQ,wCAAW,EAA3BA;gBACR,MAAQC,OAAS,oBAAQ,yCAAY,EAA7BA;gBAERR,OAAOD,QAAQK,SAASA;gBACxBJ,OAAOD,QAAQM,OAAOA;gBACtBL,OAAOD,QAAQO,UAAUA;gBACzBN,OAAOD,QAAQQ,MAAMA;gBACrBP,OAAOD,QAAQS,OAAOA;;;;gBCAtB,MAAMC,UAAU;gBAChB,MAAMC,UAAU,EACd,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GACtB,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IACzB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,C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","sources":["webpack://solace/webpack/universalModuleDefinition","webpack://solace/./index.js","webpack://solace/./modules/solclient-convert/api.js","webpack://solace/./modules/solclient-convert/lib/base64.js","webpack://solace/./modules/solclient-convert/lib/bits.js","webpack://solace/./modules/solclient-convert/lib/convert.js","webpack://solace/./modules/solclient-convert/lib/hex.js","webpack://solace/./modules/solclient-convert/lib/long.js","webpack://solace/./modules/solclient-core/api-internal.js","webpack://solace/./modules/solclient-core/api.js","webpack://solace/./modules/solclient-debug/api.js","webpack://solace/./modules/solclient-debug/lib/debug.js","webpack://solace/./modules/solclient-destination/api.js","webpack://solace/./modules/solclient-destination/lib/destination-from-network.js","webpack://solace/./modules/solclient-destination/lib/destination-type.js","webpack://solace/./modules/solclient-destination/lib/destination-util.js","webpack://solace/./modules/solclient-destination/lib/destination.js","webpack://solace/./modules/solclient-destination/lib/queue.js","webpack://solace/./modules/solclient-destination/lib/subscription-info.js","webpack://solace/./modules/solclient-destination/lib/topic.js","webpack://solace/./modules/solclient-env/api.js","webpack://solace/./modules/solclient-error/api.js","webpack://solace/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solace/./modules/solclient-error/lib/error-subcodes.js","webpack://solace/./modules/solclient-error/lib/not-implemented-error.js","webpack://solace/./modules/solclient-error/lib/operation-error.js","webpack://solace/./modules/solclient-error/lib/request-error.js","webpack://solace/./modules/solclient-error/lib/request-event-codes.js","webpack://solace/./modules/solclient-error/lib/solace-error.js","webpack://solace/./modules/solclient-eskit/api.js","webpack://solace/./modules/solclient-eskit/lib/array-operations.js","webpack://solace/./modules/solclient-eskit/lib/assert.js","webpack://solace/./modules/solclient-eskit/lib/bidi-map.js","webpack://solace/./modules/solclient-eskit/lib/enum.js","webpack://solace/./modules/solclient-eskit/lib/iterator.js","webpack://solace/./modules/solclient-eskit/lib/lazy.js","webpack://solace/./modules/solclient-eskit/lib/make-map.js","webpack://solace/./modules/solclient-eskit/lib/mixin.js","webpack://solace/./modules/solclient-eskit/lib/resolver.js","webpack://solace/./modules/solclient-eskit/lib/set-operations.js","webpack://solace/./modules/solclient-events/api.js","webpack://solace/./modules/solclient-events/lib/event-emitter.js","webpack://solace/./modules/solclient-events/lib/timer.js","webpack://solace/./modules/solclient-factory/api.js","webpack://solace/./modules/solclient-factory/lib/profile-binding.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory.js","webpack://solace/./modules/solclient-flow/api.js","webpack://solace/./modules/solclient-flow/lib/flow-operation.js","webpack://solace/./modules/solclient-flow/lib/flow.js","webpack://solace/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solace/./modules/solclient-fsm/api.js","webpack://solace/./modules/solclient-fsm/lib/entry-point.js","webpack://solace/./modules/solclient-fsm/lib/event.js","webpack://solace/./modules/solclient-fsm/lib/exit-point.js","webpack://solace/./modules/solclient-fsm/lib/object.js","webpack://solace/./modules/solclient-fsm/lib/state-context.js","webpack://solace/./modules/solclient-fsm/lib/state-machine.js","webpack://solace/./modules/solclient-fsm/lib/state.js","webpack://solace/./modules/solclient-log/api.js","webpack://solace/./modules/solclient-log/lib/console-log-impl.js","webpack://solace/./modules/solclient-log/lib/global-binding.js","webpack://solace/./modules/solclient-log/lib/log-impl.js","webpack://solace/./modules/solclient-log/lib/log-levels.js","webpack://solace/./modules/solclient-message-consumer/api.js","webpack://solace/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solace/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solace/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solace/./modules/solclient-message-publisher/api.js","webpack://solace/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solace/./modules/solclient-message-tracing/api.js","webpack://solace/./modules/solclient-message-tracing/lib/baggage.js","webpack://solace/./modules/solclient-message-tracing/lib/message-trace-context-setter.js","webpack://solace/./modules/solclient-message-tracing/lib/message-trace-context.js","webpack://solace/./modules/solclient-message-tracing/lib/message-tracing-support.js","webpack://solace/./modules/solclient-message/api.js","webpack://solace/./modules/solclient-message/lib/message-cache-status.js","webpack://solace/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solace/./modules/solclient-message/lib/message-dump-flags.js","webpack://solace/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solace/./modules/solclient-message/lib/message-dump-util.js","webpack://solace/./modules/solclient-message/lib/message-outcomes.js","webpack://solace/./modules/solclient-message/lib/message-types.js","webpack://solace/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solace/./modules/solclient-message/lib/message.js","webpack://solace/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solace/./modules/solclient-queue/api.js","webpack://solace/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solace/./modules/solclient-queue/lib/endpoint-name-complaint.js","webpack://solace/./modules/solclient-queue/lib/queue-access-types.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solace/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solace/./modules/solclient-queue/lib/queue-permissions.js","webpack://solace/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solace/./modules/solclient-queue/lib/queue-properties.js","webpack://solace/./modules/solclient-queue/lib/queue-types.js","webpack://solace/./modules/solclient-replaystart/api.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solace/./modules/solclient-sdt/api.js","webpack://solace/./modules/solclient-sdt/lib/codec/api.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solace/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solace/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field.js","webpack://solace/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solace/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solace/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solace/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solace/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solace/./modules/solclient-session/api.js","webpack://solace/./modules/solclient-session/lib/authentication-schemes.js","webpack://solace/./modules/solclient-session/lib/capability-types.js","webpack://solace/./modules/solclient-session/lib/correlated-request.js","webpack://solace/./modules/solclient-session/lib/default-capabilities.js","webpack://solace/./modules/solclient-session/lib/global-context.js","webpack://solace/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solace/./modules/solclient-session/lib/host-list.js","webpack://solace/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solace/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solace/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solace/./modules/solclient-session/lib/p2p-util.js","webpack://solace/./modules/solclient-session/lib/provision-event.js","webpack://solace/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solace/./modules/solclient-session/lib/session-event-codes.js","webpack://solace/./modules/solclient-session/lib/session-event-names.js","webpack://solace/./modules/solclient-session/lib/session-event.js","webpack://solace/./modules/solclient-session/lib/session-fsm-event.js","webpack://solace/./modules/solclient-session/lib/session-fsm.js","webpack://solace/./modules/solclient-session/lib/session-operations.js","webpack://solace/./modules/solclient-session/lib/session-properties-validator.js","webpack://solace/./modules/solclient-session/lib/session-properties.js","webpack://solace/./modules/solclient-session/lib/session-request-types.js","webpack://solace/./modules/solclient-session/lib/session-state-names.js","webpack://solace/./modules/solclient-session/lib/session-states.js","webpack://solace/./modules/solclient-session/lib/session.js","webpack://solace/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solace/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solace/./modules/solclient-smf/api.js","webpack://solace/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solace/./modules/solclient-smf/lib/codec/api.js","webpack://solace/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solace/./modules/solclient-smf/lib/codec/decode.js","webpack://solace/./modules/solclient-smf/lib/codec/encode.js","webpack://solace/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solace/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solace/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solace/./modules/solclient-smf/lib/codec/smp.js","webpack://solace/./modules/solclient-smf/lib/codec/transport.js","webpack://solace/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/api.js","webpack://solace/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solace/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solace/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solace/./modules/solclient-smf/lib/smf-protocols.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solace/./modules/solclient-solcache-session/api.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solace/./modules/solclient-stats/api.js","webpack://solace/./modules/solclient-stats/lib/stat-bymode.js","webpack://solace/./modules/solclient-stats/lib/stat-types.js","webpack://solace/./modules/solclient-stats/lib/stats.js","webpack://solace/./modules/solclient-transport/api.js","webpack://solace/./modules/solclient-transport/lib/base-smf-client.js","webpack://solace/./modules/solclient-transport/lib/buffer-queue.js","webpack://solace/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solace/./modules/solclient-transport/lib/smf-client.js","webpack://solace/./modules/solclient-transport/lib/transport-base.js","webpack://solace/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solace/./modules/solclient-transport/lib/transport-error.js","webpack://solace/./modules/solclient-transport/lib/transport-factory.js","webpack://solace/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solace/./modules/solclient-transport/lib/transport-protocols.js","webpack://solace/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event.js","webpack://solace/./modules/solclient-transport/lib/transport-session-states.js","webpack://solace/./modules/solclient-transport/lib/tsh-state.js","webpack://solace/./modules/solclient-transport/lib/web/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solace/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solace/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solace/./modules/solclient-transport/lib/web/state-base64.js","webpack://solace/./modules/solclient-transport/lib/web/state-binary.js","webpack://solace/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solace/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solace/./modules/solclient-util/api.js","webpack://solace/./modules/solclient-util/lib/api-properties-validators.js","webpack://solace/./modules/solclient-util/lib/api-properties.js","webpack://solace/./modules/solclient-util/lib/array-utils.js","webpack://solace/./modules/solclient-util/lib/browser-url-polyfill.js","webpack://solace/./modules/solclient-util/lib/clone.js","webpack://solace/./modules/solclient-util/lib/process.js","webpack://solace/./modules/solclient-util/lib/string-buffer.js","webpack://solace/./modules/solclient-util/lib/string-utils.js","webpack://solace/./modules/solclient-util/lib/timing-bucket.js","webpack://solace/./modules/solclient-util/lib/url.js","webpack://solace/./modules/solclient-util/lib/uuid.js","webpack://solace/./modules/solclient-util/lib/version.js","webpack://solace/./modules/solclient-validate/api.js","webpack://solace/./modules/solclient-validate/lib/base-checks.js","webpack://solace/./modules/solclient-validate/lib/check.js","webpack://solace/./modules/solclient-validate/lib/parameter.js","webpack://solace/./node_modules/base64-js/index.js","webpack://solace/./node_modules/browser-util-inspect/index.js","webpack://solace/./node_modules/buffer/index.js","webpack://solace/./node_modules/events/events.js","webpack://solace/./node_modules/ieee754/index.js","webpack://solace/./node_modules/fflate/lib/browser.cjs","webpack://solace/./node_modules/long/umd/index.js","webpack://solace/webpack/bootstrap","webpack://solace/webpack/runtime/global","webpack://solace/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"solace\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"solace\"] = factory();\n\telse\n\t\troot[\"solace\"] = factory();\n})(this, () => {\nreturn ","// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\n\nfunction uint8ArrayToString(data, format = undefined) {\n  const dataLength = data.byteLength;\n  const uint8DataArray = new Uint8Array(BufferImpl.from(data));\n  let result = '';\n  for (let i = 0; i < dataLength; i++) {\n    if(format && format.toLowerCase() === 'hex') {\n      result += (uint8DataArray[i]).toString(16).padStart(2, '0');\n    } else {\n      result += String.fromCharCode(uint8DataArray[i] & 0xff);\n    }\n  }\n  return result;\n}\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction hexStringToUint8Array(data) {\n  // if null data, return empty Uint8Array\n  if(data == null) {\n    return new Uint8Array();\n  }\n  return Uint8Array.from(BufferImpl.from(data, 'hex'));\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  \n  uint8ArrayToString,\n  stringToUint8Array,\n\n  hexStringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","module.exports.Long = require('long');\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst MessageTracing = require('solclient-message-tracing');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  MessageTracing,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  Baggage,\n  TraceContext,\n  TraceContextSetter,\n} = require('solclient-message-tracing');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  EndpointNameComplaint,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  Baggage,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  EndpointNameComplaint,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TraceContext,\n  TraceContextSetter,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'invalid queue or topic endpoint durability', SC.INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND,\n    'invalid queue name', SC.INVALID_QUEUE_NAME,\n    'invalid topic endpoint name', SC.INVALID_TE_NAME,\n    'message size out of range', SC.MESSAGE_SIZE_OUT_OF_RANGE,\n    'unsupported permissions', SC.UNSUPPORTED_PERMISSIONS,\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    // 'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on anonymous queue', SC.REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED,\n    'replay not supported on anonymous queue without subscriptions', SC.REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'browsing not supported on partitioned queue', SC.PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED,\n    'selectors not supported on partitioned queue', SC.PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'sync replication ineligible', SC.SYNC_REPLICATION_INELIGIBLE,\n    'max endpoints exceeded', SC.MAX_ENDPOINTS_EXCEEDED,\n    'copy-from queue template missing', SC.COPY_FROM_QUEUE_TEMPLATE_MISSING,\n    'copy-from topic-endpoint template missing', SC.COPY_FROM_TE_TEMPLATE_MISSING,\n  ),\n  507, makeMap(\n    'assured delivery not ready', SC.ASSURED_DELIVERY_NOT_READY,\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to or create a Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   * @deprecated since 10.3.1 - Replay is now supported on Temp Endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT:         160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                                161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                               162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                                 163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                           164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                             165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:                    166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                           167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                                    168,\n  /**\n   * Replay is not supported on anonymous queue\n   * - 403 Replay Not Supported on Anonymous Queue\n   */\n  REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED:                         169,\n  /**\n   * Browser flows to Partitioned Queues are not permitted.\n   * - 403 Browsing Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED:                     170,\n  /**\n   * Egress selectors are not permitted when binding to a Partitioned Queue.\n   * - 403 Selectors Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED:                    171,\n  /**\n   * Replay Not Supported on Anonymous Queue Without Subscriptions\n   * - 403 Replay Not Supported on Anonymous Queue Without Subscriptions\n   */\n  REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED:   172,\n  /**\n   * The message was rejected because the appliance has been configured\n   * to reject messages when sync replication mode is ineligible.\n   * - 503 Sync Replication Ineligible (Reject Messages when Synchronous Replication Mode is Ineligible)\n   * \n   * * The transaction was started as a synchronous replicated transaction,\n   * but replication became ineligible during the transaction.\n   * - 503 Sync Replication Ineligible (Replication Ineligible during Synchronous Replicated Transaction)\n   */\n  SYNC_REPLICATION_INELIGIBLE:                                  173,\n  /**\n   * An attempt was made to bind to a durable TE or Queue \n   * with a flow property of ‘non-durable’.\n   *\n   * Causes:\n   *  * 400 Invalid Queue or Topic Endpoint Durability\n   */\n  INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY:                   174,\n  /**\n   * Provisioning failed due to invalid queue name. \n   *\n   * Causes:\n   *  * 400 Invalid Queue Name\n   */\n  INVALID_QUEUE_NAME:                   175,\n  /**\n   * Provisioning failed due to invalid topic endpoint name. \n   *\n   * Causes:\n   *  * 400 Invalid Topic Endpoint Name\n   */\n  INVALID_TE_NAME:                   176,\n  /**\n   * Provisioning failed because the requested max message size was too large. \n   *\n   * Causes:\n   *  * 400 Message Size Out Of Range\n   */\n  MESSAGE_SIZE_OUT_OF_RANGE:         177,\n  /**\n   * Provisioning failed because the requested permissions are not supported. \n   *\n   * Causes:\n   *  * 400 Unsupported permissions\n   */\n  UNSUPPORTED_PERMISSIONS:         178,\n  /**\n   * Provisioning failed because the requested permissions are not supported. \n   *\n   * Causes:\n   *  * 503 Max endpoints exceeded\n   */\n  MAX_ENDPOINTS_EXCEEDED:         179,\n  /**\n   * Provisioning failed because router is unable to perform Assured Delivery. \n   *\n   * Causes:\n   *  * 507 Assured Delivery Not Ready\n   */\n  ASSURED_DELIVERY_NOT_READY:         180,\n  /**\n   * Provisioning failed due to a queue template configuration error on the broker. \n   *\n   * Causes:\n   *  * 503 Copy-from queue template missing\n   */\n  COPY_FROM_QUEUE_TEMPLATE_MISSING:         181,\n  /**\n   * Provisioning failed due to a topic endpoint template configuration error on the broker. \n   *\n   * Causes:\n   *  * 503 Copy-from topic-endpoint template missing\n   */\n  COPY_FROM_TE_TEMPLATE_MISSING:         182,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import Long = require('long');\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns `true` if this Guaranteed Message Consumer was disposed.\n   * @readonly\n   * @type {Boolean}\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnected;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum, assert } = require('solclient-eskit');\nconst { MessageOutcome } = require('solclient-message');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state, settlementOutcome) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n      this.settlementOutcome = settlementOutcome || MessageOutcome.ACCEPTED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state, settlementOutcome = undefined) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n    this.settlementOutcome = (settlementOutcome !== undefined) ? settlementOutcome : null; // outcome not yet set at point of insertion\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n    this.settlementOutcome = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @param {?MessageOutcome} settlementOutcome where available, update the settlement outcome for the ID\n   * @private\n   */\n  updateAckState(id, state, settlementOutcome = undefined) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n    // where available, update the settlement outcome too\n    if(settlementOutcome != undefined) {\n      existing.settlementOutcome = settlementOutcome;\n    } else if(state === ApplicationAckState.ACKED_NOT_SENT) {\n      // set default settlement outcome to ACCEPTED for ACKed messages if no outcome available\n      existing.settlementOutcome = MessageOutcome.ACCEPTED;\n    }\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { MessageOutcome, RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\n// assumption is that this first message (messageId = 0) settlement outcome is ACCEPTED (ACKed)\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT, MessageOutcome.ACCEPTED);\n\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n    this._hasAutoAckSupport = autoAck;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n\n    function verifyNackSettlementOutcomesSupport(requiredSettlementOutcomes) {\n      let error = null;\n      // check for whether the broker session supports the NACK capability\n      const settlementOutcomes = requiredSettlementOutcomes;\n      if (settlementOutcomes && settlementOutcomes.length > 0) {\n        // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n        const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n        if(isNackRequired && !fsm._sessionInterface.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n          const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n            settlementOutcomes.map(v => MessageOutcome.nameOf(v)).join(', ')\n          } ]`;\n          // log the operation error as a Warning\n          LOG_WARN(outcomeNotSupportedError);\n          // then create the actual OperationError object here\n          error = new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION);\n        }      \n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n      else if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n\n    /**\n     * Check Capabilities on Re-Bind\n     * \n     * @param {*} curState - current state\n     * @param {*} externalTransition - is an external transition?\n     * @returns {State} retrurns the new state for the state machine\n     * @private\n     */\n    function checkCapabilitiesChoicePointOnRebind(curState, externalTransition = false) {\n      let error = null;\n      if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to re-bind\n      if (externalTransition) {\n        return curState.externalTransitionTo(fsm.Reconnecting.RBindSent);\n      }\n      return curState.transitionTo(fsm.Reconnecting.RBindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state and partition group ID, if any');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          (properties.requiredSettlementOutcomes && properties.requiredSettlementOutcomes.length > 0));\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          properties.requiredSettlementOutcomes]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        // the partition group ID\n        let partitionGroupIdValue = msg.getPartitionGroupId();\n        if(partitionGroupIdValue == undefined || partitionGroupIdValue == null) {\n          partitionGroupIdValue = undefined; // set it as undefined\n          fsm._clearPartitionGroupId(); // clear the partitionGroupId\n        }\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n          partitionGroupId:     partitionGroupIdValue,\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n          partitionGroupId:     partitionGroupIdValue,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return checkCapabilitiesChoicePointOnRebind(this, false);\n          // return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return checkCapabilitiesChoicePointOnRebind(this, false);\n        // return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return checkCapabilitiesChoicePointOnRebind(this, true);\n          // return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return checkCapabilitiesChoicePointOnRebind(this, false);\n      // return this.transitionTo(fsm.Reconnecting.RBindSent);\n    });\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emitting UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emitting UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          const dupAckRanges = new Map();\n          dupAckRanges.set(MessageOutcome.ACCEPTED, [[messageID, messageID]]);\n          this._sendAck(dupAckRanges); // send ack for duplicates as ACCEPTED outcome (broker would use previous settlement outcome for message)\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId, isAutoAcked = false) {\n    // internally call the applicationSettle(messageId, MessageOutcome.ACCEPTED); \n    // since the implementations are the same\n    this.applicationSettle(messageId, MessageOutcome.ACCEPTED, isAutoAcked);\n  }\n\n  applicationSettle(messageId, messageOutcome = MessageOutcome.ACCEPTED, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n\n    // increment the correct stat for the outcome\n    switch(messageOutcome) {\n      case MessageOutcome.FAILED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.FAILED');\n        // count persistent and non-persistent settled failed msgs\n        this._consumer.incStat(StatType.RX_SETTLE_FAILED);\n        break;\n      // case MessageOutcome.RELEASED:\n      //   // no current support for RELEASED settlement Outcome\n      //   break;\n      case MessageOutcome.REJECTED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.REJECTED');\n        // count persistent and non-persistent settled rejected msgs\n        this._consumer.incStat(StatType.RX_SETTLE_REJECTED);\n        break;\n\n      case MessageOutcome.ACCEPTED:\n         // count persistent and non-persistent settled accepted msgs\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.ACCEPTED');\n        // count for manual calls on Message.acknowledge(); or Message.settle(outcome); methods\n        // so that we don't count for auto-Acks\n        if(!isAutoAcked) {\n          this._consumer.incStat(StatType.RX_SETTLE_ACCEPTED); // count persistent and non-persistent settled accepted msgs\n        }\n        // increment the Acked stat for calls to accept() and auto-acks\n        this._consumer.incStat(StatType.RX_ACKED); // count it as normal acknowledgement\n        break;\n    }\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      const oldAckRanges = new Map();\n      oldAckRanges.set(messageOutcome, [[messageId, messageId]]);\n      this._sendAck(oldAckRanges); // send settlement outcome for message\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT, messageOutcome);\n    // if the message outcome is not ACCEPTED, then flush the buffer immediately\n    if(messageOutcome !== MessageOutcome.ACCEPTED) {\n      this._sendAcks(true); // send the accumulated Ack(s) and Nacks immediately\n    } else {\n      this._setTransportAckTimer();\n    }\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _clearPartitionGroupId() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Clear the consumer.partitionGroupId; Set it to undefined');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n\n    LOG_TRACE('Initializing partitionGroupId');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Map.<Array.<ackpair>>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    // they will hold an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    const currentRangeLength = currentRange.length;\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      // check for the type of settlement outcome and push if same as aggregation group\n      if(\n        currentRangeLength === 0 ||\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome === applicationAck.settlementOutcome)\n      ) {\n        currentRange.push(applicationAck);\n        return; // Wait for end of range or flush\n      }\n      // if settlement outcomes were flushed and applicationAck still remaining, start another aggregation group\n      else if(\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome !== applicationAck.settlementOutcome)\n      ) {\n        const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n        ackRanges[rangeOutcome].push(currentRange); // flush the range since we detect a change in outcomes\n\n        acksPendingState.currentRange = []; // Clear the accumulators for this range.\n        acksPendingState.currentRange.push(applicationAck); // push the detected change\n        return; // Wait for end of range or flush\n      }\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range for each of the settlement outcomes.\n    if (currentRangeLength) {\n      const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n      ackRanges[rangeOutcome].push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n\n    // aggregate the total length of the ack/nack ranges\n    let totalRangeLen  = 0;\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      totalRangeLen += ackRanges[allMessageOutcomes[i]].length;\n    }\n\n    if (applicationAck === null || (totalRangeLen === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES)) {\n      // Reduce each range for each of the settlement outcomes to a first and last ID.\n      const bareRanges = new Map(); // ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n      let hasAnyBareRanges = false;\n\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        // check for value and only put real values into map\n        if(ackRanges[allMessageOutcomes[i]].length > 0) {\n          bareRanges.set(allMessageOutcomes[i], ackRanges[allMessageOutcomes[i]].map(\n            range => [range[0].id, range[range.length - 1].id]\n          ));\n          // we have written at least one outcome ack/nack range into the map\n          hasAnyBareRanges = true;\n        }\n      }\n\n      if (hasAnyBareRanges || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n\n        this._sendAck(bareRanges); // now contains a Map of Arrays to pass settlement outcomes to Broker\n\n        // expectation is only ONE NACK before we flush the (N)acks in the RingBuffer to the broker\n        const failedBareRanges = bareRanges.get(MessageOutcome.FAILED);\n        const rejectedBareRanges = bareRanges.get(MessageOutcome.REJECTED);\n\n        // Warning: this log statement reduces debug performance by about 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks(ACCEPTED): ${bareRanges.has(MessageOutcome.ACCEPTED)\n            ? bareRanges.get(MessageOutcome.ACCEPTED).map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}\\n`,\n          `Application Nacks(FAILED): ${bareRanges.has(MessageOutcome.FAILED)\n            ? `[${failedBareRanges[0][0]}..${failedBareRanges[0][1]}]`\n            : '[]'}\\n`,\n          `Application Nacks(REJECTED): ${bareRanges.has(MessageOutcome.REJECTED)\n            ? `[${rejectedBareRanges[0][0]}..${rejectedBareRanges[0][1]}]`\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        ackRanges[allMessageOutcomes[i]].forEach((ackRange) => {\n          ackRange.forEach((ack) => {\n            if (ack.state !== ApplicationAckState.ACKED_SENT) {\n              try {\n                this._applicationAcks.updateAckState(ack.id,\n                                                     ApplicationAckState.ACKED_SENT);\n              } catch (e) {\n                const { LOG_ERROR } = this.logger;\n                LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n              }\n            }\n          });\n        });\n      }\n\n      // Clear the main accumulators since it has hit the wire.\n      acksPendingState.ackRanges = [];\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n      }\n    }\n    // Clear the accumulators for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [], // holds an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n      currentRange:      [], // holds an Array for each supported settlement outcomes per aggregation (i.e. indexes -> 0,1,2,3)\n    };\n\n    // initialize the ackRanges with Array of Arrays\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n    }\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      assert(acksPendingState.ackRanges[allMessageOutcomes[i]].length === 0);\n    }\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n  get hasAutoAckSupport() {\n    return this._hasAutoAckSupport;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   * @default null\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.activeIndicationEnabled &&\n      instance.queueDescriptor.type !== QueueType.QUEUE) {\n      throw new OperationError(\n        `${prefix} validation: activeIndicationEnabled may only be true for ` +\n        'QUEUE destinations',\n        ErrorSubcode.PARAMETER_CONFLICT\n      );\n    }\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  requiredSettlementOutcomes:              [], // MessageOutcome.ACCEPTED is not required to be set and always supported\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties|null|undefined}\n   * @default undefined\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The required settlement outcomes for the Message Consumer.\n   *\n   * A session is created with SUPPORTED_MESSAGE_ACK_CLIENT by setting\n   * the requiredSettlementOutcomes property to support negative acknowledgment outcomes.\n   *\n   * The {@link solace.MessageOutcome.ACCEPTED} outcome is not required to be set and is always\n   * supported as a settlement outcome.\n   *\n   * When the requiredSettlementOutcomes include either {@link solace.MessageOutcome.FAILED}\n   * or {@link solace.MessageOutcome.REJECTED}, a message can be settled with any of these outcomes.\n   *\n   * The {@link solace.Message#acknowledge} method internally calls the {@link solace.Message#settle}\n   * with the {@link solace.MessageOutcome.ACCEPTED} passed as the settlement outcome for that message.\n   *\n   * When received messages are Application Acknowledged/Settled with\n   * a {@link solace.MessageOutcome.ACCEPTED} outcome, they are removed from the Guaranteed\n   * Message storage on the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {Array.<solace.MessageOutcome>}\n   * @default []\n   */\n  get requiredSettlementOutcomes() {\n    return Check.something(this._requiredSettlementOutcomes)\n      && Check.array(this._requiredSettlementOutcomes)\n      ? this._requiredSettlementOutcomes\n      : DEFAULTS.requiredSettlementOutcomes;\n  }\n  set requiredSettlementOutcomes(value) {\n    this._requiredSettlementOutcomes = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageOutcome } = require('solclient-message');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n    this.partitionGroupId = undefined; // support Partition Q feature\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {any} isAutoAcked whether this is an auto-acked message\n   * @internal\n   */\n  applicationAck(messageId, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId, isAutoAcked);\n  }\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {solace.MessageOutcome} settlementOutcome The message settlement outcome\n   * @internal\n   */\n  applicationSettle(messageId, settlementOutcome) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application settlement for ${\n      messageId\n    } with outcome: solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)}`);\n    this._fsm.applicationSettle(messageId, settlementOutcome);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message._autoAcknowledge(); // No, so auto ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const { Baggage } = require('./lib/baggage');\nconst { TraceContext } = require('./lib/message-trace-context');\nconst { TraceContextSetter } = require('./lib/message-trace-context-setter');\nconst { MessageTracingSupport } = require('./lib/message-tracing-support');\n\nmodule.exports.Baggage = Baggage;\nmodule.exports.TraceContext = TraceContext;\nmodule.exports.TraceContextSetter = TraceContextSetter;\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","const { Parameter: { isStringOrNothing } } = require('solclient-validate');\n\n/**\n * @classdesc\n * <b>This class abstracts baggage metadata used for distributed\n * message tracing with Solace messaging APIs types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class Baggage {\n \n    /**\n     * Get the value of the baggage associated with the message.\n     * This method is for internal use only.\n     *\n     * @returns {?String} value of baggage associated with the message\n     * @internal\n     */\n    getBaggage() {\n        return this._baggage || null;\n    }\n \n    /**\n     * Sets the value of the baggage associated with this message\n     * This method is for internal use only.\n     *\n     * @param {?String} value The valid value of baggage associated with this  message\n     * @see {@link https://www.w3.org/TR/2022/WD-baggage-20220928|w3c baggage format specification}  \n     * @internal\n     */\n    setBaggage(value) {\n        this._setBaggage(isStringOrNothing('baggage', value));\n    }\n    _setBaggage(value) {\n        this._baggage = value;\n    }\n \n}\n\nmodule.exports.Baggage = Baggage;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n    isNumber,\n    isBoolean,\n    isString,\n    isStringOrNothing,\n} = Parameter;\n\nconst { uint8ArrayToString } = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts settable metadata used for \n * distributed message tracing with Solace messaging APIs \n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class TraceContextSetter {\n\n    /**\n     * Abstract constructor for metadata used \n     * for distributed message tracing.\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor() {\n        this._traceId = null;\n        this._spanId = null;\n        this._isSampled = false;\n        this._traceState = null;\n        this._version = 0x01; // version=0001 (4 bits, version=1);\n    }\n\n    /**\n     * Clone this TraceContextSetter object.\n     * \n     * @returns {TraceContextSetter} the cloned TraceContextSetter instance\n     */\n    clone() {\n        const _clonedContextSetter = new TraceContextSetter();\n        _clonedContextSetter._setSpanId(this._spanId);\n        _clonedContextSetter._setTraceId(this._traceId);\n        _clonedContextSetter._setSampled(this._isSampled);\n        _clonedContextSetter._setTraceState(this._traceState);\n        _clonedContextSetter._setVersion(this._version);\n        return _clonedContextSetter;\n    }\n\n    /**\n     * The length of the traceId bytes in the binary message\n    */\n    static get TRACE_ID_BYTES_LENGTH() {\n        return 16;\n    }\n\n    /**\n     * The length of the spanId bytes in the binary message\n    */\n    static get SPAN_ID_BYTES_LENGTH() {\n        return 8;\n    }\n\n    /**\n     * The version which for now is 1. -> 0001\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);;\n    }\n    /**\n     * Sets the version\n     * \n     * @param {Number} value The version encoded as Hex value\n     */\n    setVersion(value) {\n        this._setVersion(isNumber('version', value));\n    }\n    _setVersion(value) {\n        this._version = value;\n    }\n\n    /**\n     * @private\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Sets the value of the trace identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 16-length Hex string\n     */\n    setTraceId(value) {\n        this._setTraceId(isString('traceId', value));\n    }\n    _setTraceId(value) {\n        this._traceId = value;\n    }\n \n    /**\n     * @private\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Sets the value of the span identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 8-length Hex string\n     */\n    setSpanId(value) {\n        this._setSpanId(isString('spanId', value));\n    }\n    _setSpanId(value) {\n        this._spanId = value;\n    }\n \n    /**\n     * @private\n    */\n    get isSampled() {\n        return this._isSampled || false;\n    }\n    /**\n     * Turns on or off sampling for the associated message.\n     * \n     * @param {Boolean} value if true sampling is on, off otherwise\n     */\n    setSampled(value) {\n        this._setSampled(isBoolean('isSampled', value));\n    }\n    _setSampled(value) {\n        this._isSampled = value;\n    }\n \n    /**\n     * @private\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Sets the value of the trace state associated with the message.\n     * \n     * @param {?String} value The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    setTraceState(value) {\n        this._setTraceState(isStringOrNothing('traceState', value));\n    }\n    _setTraceState(value) {\n        this._traceState = value;\n    }\n\n    /**\n     * Gets a new instance of the Message Trace Context Setter \n     * from the values in the SMF header associated with the message.\n     * \n     * @param {Buffer | Uint8Array | String | null} traceContextValue The value of trace context associated with the message\n     * @returns {solace.TraceContextSetter | null} Context setter object\n     */\n    static fromTraceContext(traceContextValue) {\n        // implementation here\n        if (traceContextValue == null) {\n            return null;\n        }\n\n        let traceContextBuffer = null;\n        if (BufferImpl.isBuffer(traceContextValue)) {\n            traceContextBuffer = traceContextValue; // do nothing since it is already a buffer\n        } else if (typeof traceContextValue === 'string') {\n            traceContextBuffer = BufferImpl.from(traceContextValue, 'latin1');\n        }\n\n        // the trace context value is at least 32 bytes (without trace state)\n        if (!traceContextBuffer || traceContextBuffer.length < 32) {\n            return null;\n        }\n\n        try {\n            const traceContextBytes = (new Uint8Array(traceContextBuffer)).buffer;\n            let bytesRead = 0; // to track the byte read offsets\n\n            const traceContextSetter = new TraceContextSetter();\n\n            const firstByte = traceContextBytes.slice(bytesRead, bytesRead + (1));\n            const byte1DataView = new DataView(firstByte, 0, 1);\n            let byte1 = byte1DataView.getUint8(bytesRead);// get the first byte\n\n            const version = byte1 >> 4; // get the version from the four MSB\n            traceContextSetter.setVersion(version); // set the version\n\n            const isSampled = ((byte1 & 0x0F) == 0x04);\n            traceContextSetter.setSampled(isSampled); // set the sampled status\n            bytesRead++;\n\n            const traceId16Bytes = traceContextBytes.slice(bytesRead, bytesRead + (16));\n            const traceId = uint8ArrayToString(traceId16Bytes, 'hex'); // set the traceId\n            traceContextSetter.setTraceId(traceId);\n            bytesRead += TraceContextSetter.TRACE_ID_BYTES_LENGTH;\n\n            const spanId8Bytes = traceContextBytes.slice(bytesRead, bytesRead + (8));\n            const spanId = uint8ArrayToString(spanId8Bytes, 'hex'); // set the spanId\n            traceContextSetter.setSpanId(spanId);\n            bytesRead += TraceContextSetter.SPAN_ID_BYTES_LENGTH;\n\n            bytesRead ++; // Skip InjectionStandard byte\n            bytesRead += 4; // Skip the 4 RFU bytes\n\n            const traceStateLengthBytes = traceContextBytes.slice(bytesRead, bytesRead + (2));\n            const traceStateLengthDataView = new DataView(traceStateLengthBytes, 0, traceStateLengthBytes.byteLength);\n            const traceStateLength = traceStateLengthDataView.getUint16(0, false);// get the trace length\n            bytesRead += 2; // move pointer past length bytes\n\n            // if there is a trace state value, read it\n            if (traceStateLength > 0) {\n                const traceStateBytes = traceContextBytes.slice(bytesRead, bytesRead + (traceStateLength));\n                const traceState = uint8ArrayToString(traceStateBytes); // set the trace state\n                traceContextSetter.setTraceState(traceState);\n            }\n            return traceContextSetter;\n        } catch (ex) {\n            return null;\n        }\n    }\n}\n\nmodule.exports.TraceContextSetter = TraceContextSetter;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\nconst {\n    isBoolean,\n    isStringOrNothing,\n} = Parameter;\n\nconst {\n    stringToUint8Array,\n    hexStringToUint8Array,\n} = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts readonly view on a metadata used for \n * distributed message tracing with Solace messaging APIs\n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\nclass TraceContext {\n\n    /**\n     * Abstract constructor for readonly view on metadata used \n     * for distributed message tracing.\n     * \n     * @param {TraceContextSetter} traceContextSetter {TraceContextSetter}\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor(traceContextSetter) {\n        this._traceId = isStringOrNothing('traceId', traceContextSetter.traceId);\n        this._spanId = isStringOrNothing('spanId', traceContextSetter.spanId);\n        this._isSampled = isBoolean('isSampled', traceContextSetter.isSampled);\n        this._traceState = traceContextSetter.traceState;\n        this._version = traceContextSetter.version;\n    }\n\n    /**\n     * Clone the a TraceContext object used \n     * for distributed message tracing.\n     * \n     * @param {TraceContext} toClone {TraceContext}\n     * @returns {TraceContext} the newly cloned TraceContext instance\n     */\n    static clone(toClone) {\n        const newContextSetter = new TraceContextSetter();\n        newContextSetter._setSpanId(toClone.getSpanId());\n        newContextSetter._setTraceId(toClone.getTraceId());\n        newContextSetter._setSampled(toClone.getIsSampled());\n        newContextSetter._setTraceState(toClone.getTraceState());\n        newContextSetter._setVersion(toClone.getVersion());\n        return new TraceContext(newContextSetter);\n    }\n\n    /**\n     * The version which for now is 1.\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);\n    }\n    /**\n     * Gets the version associated with the message trace.\n     * \n     * @returns {Number} The version encoded as Hex value\n     */\n    getVersion() {\n        return this.version;\n    }\n\n    /**\n     * The maximum allowed string size of trace state to propagate.\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n    */\n    get MAX_TRACE_STATE_LENGTH() {\n        return 512;\n    }\n \n    /**\n     * The tranceId property as a 16-length string\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Gets the value of the trace identifier associated with the message.\n     * \n     * @returns {String} value of trace identifier associated with the message as\n     * 16-length string.\n     */\n    getTraceId() {\n        return this._traceId;\n    }\n \n    /**\n     * The spanId property a 8-length string\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Gets the value of the span identifier associated with the message.\n     * \n     * @returns {String} value of span identifier associated with the message as\n     * 8-length string.\n     */\n    getSpanId() {\n        return this._spanId;\n    }\n\n    /**\n     * The isSampled boolean property\n    */\n    get isSampled() {\n        return this._isSampled;\n    }\n    /**\n     * Returns true if the sampling for the associated message is on,\n     * otherwise false.\n     * \n     * @returns {Boolean} indicates whether the sampling is on or off\n     */\n    getIsSampled() {\n        return this._isSampled || false;\n    }\n\n    /**\n     * The traceState property\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTraceState() {\n        return this._traceState || null;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTruncatedTraceState() {\n        return this._standardTraceStateTruncation(this.MAX_TRACE_STATE_LENGTH);\n    }\n\n\n    /**\n     * It returns the encoded bytes that is \n     * passed to the SMF header to be encoded in \n     * SMF for the message.\n     * \n     * @returns {?Uint8Array} The value of encoded trace span context\n     */\n    getEncodedTraceContext() {\n        // format the string payload \n        // and return the correct format as a byte array or null\n        if (this.traceId == null || this.spanId == null) {\n            return null;\n        }\n\n        const traceStateLength = this.traceState == null ? 0 : this.traceState.length;\n\n        // the fixed part of the encoded data is at least 32 bytes\n        const contentBuffer = new ArrayBuffer(32 + traceStateLength);\n        let offsetPos = 0; // start from the beginning of the buffer\n        const contentBufferDataView = new DataView(contentBuffer);\n\n        let byte1 = 0; // headerByte: version 4 bits, sampled 2 bits and RFU=0 2 bits\n        // set the version to the four MSB\n        byte1 |= (this.version << 4); // version=0001 (4 bits, version=1)\n        byte1 |= this.isSampled ? 0x04 : 0x00; //sampled=0100 (2 bits, sampled=1 and 2 bits RFU=0)\n\n        // write the 1 byte header\n        contentBufferDataView.setUint8(offsetPos, byte1, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write the first 16 bytes traceId\n        const traceId16byte = hexStringToUint8Array(this.traceId); // get the 8 byte array\n        for(let i = 0; i < 16; i ++) { // write the first 16 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, traceId16byte[i], false); // write the bytes\n        }\n        offsetPos += 16; // move pointer to next free position (plus 16 bytes)\n\n        // write the first 8 bytes spanId\n        const spanId8byte = hexStringToUint8Array(this.spanId) // get the 8 byte array\n        for(let i = 0; i < 8; i ++) { // write the first 8 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, spanId8byte[i], false); // write the bytes\n        }\n        offsetPos += 8; // move pointer to next free position (plus 8 bytes)\n\n        // write 1 byte InjectionStandard=1 (W3C)\n        contentBufferDataView.setUint8(offsetPos, 0x01, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write 4 bytes RFU=0\n        // use BigEndian; litteEndian = false\n        contentBufferDataView.setUint16(offsetPos, 0, false); // write first two RFU bytes of zeros\n        contentBufferDataView.setUint16(offsetPos + 2, 0, false); // write last two RFU bytes of zeros\n        offsetPos += 4; // move pointer to next free position\n\n\t    if (this.traceState == null) {\n            // write 2 bytes TraceState length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, 0, false); // write two bytes of zeros\n            offsetPos += 2; // move pointer to next free position\n\t    } else {\n\t      // If required, apply truncation logic on traceState\n\t      const truncatedTraceState = this.getTruncatedTraceState();\n\t      if (truncatedTraceState != null) {\n            // write 2 bytes TraceState length\n            const traceStateLength = truncatedTraceState.length;\n            // convert to two bytes\n            const traceStateLengthBytes = new Uint16Array([traceStateLength]); // get 2 bytes of length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, traceStateLengthBytes, false);\n            offsetPos += 2; // move pointer to next free position\n\n            // set the remaining trace state bytes\n            const traceStateBytes = stringToUint8Array(truncatedTraceState);\n            for(let i = 0; i < traceStateBytes.length; i ++) {\n                // use BigEndian; litteEndian = false\n                contentBufferDataView.setUint8(offsetPos + i, traceStateBytes[i], false); // write the bytes\n            }\n            offsetPos += traceStateBytes.length;\n\t      }\n\t    }\n\n        // get the 8-byte array\n\t    return new Uint8Array(contentBuffer);\n    }\n\n    /**\n     * Truncate long trace states properly\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n     * @private\n     * @param {Number} maxTraceStateLength the maximum length for the trace state\n     * @returns {?String} The truncated trace state\n     */\n    _standardTraceStateTruncation(maxTraceStateLength) {\n        // cover corner cases\n\t    if (!this._traceState || this._traceState == null) {\n\t      return null;\n\t    } else if (this._traceState.length < maxTraceStateLength) {\n\t      return this._traceState; // no need to truncate\n\t    }\n\t\n        const ignoredMembers = new Array();\n\t    const traceStateBuilderArray = new Array();\n        let traceStateBuilderArrayLength = 0;\n\t    const listMembers = this._traceState.split(',');\n\n\t    for (let i = 0; i < listMembers.length; i++) {\n            let listMember = listMembers[i]; // current iteration object\n            if (listMember !== '' && listMember != null) {\n                let currentMemberLength = listMember.length;\n                if (currentMemberLength > 128) {\n                    // first of all, let's ignore members with length > 128 char\n                    ignoredMembers.push(listMember);\n                } else {\n                    let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                        traceStateBuilderArrayLength > 0 ? 1 : 0));\n\n                    if (newExpectedLength <= maxTraceStateLength) {\n                        // the comma seperator is added at the end when building the string\n                        traceStateBuilderArray.push(listMember);\n                        // increment by length of added member + 1 (for the comma)\n                        traceStateBuilderArrayLength += (currentMemberLength + (\n                            traceStateBuilderArrayLength > 0 ? 1 : 0));\n                    } else {\n                        ignoredMembers.push(listMember);\n                    }\n                }\n            }\n\t    }\n\t\n\t    // See if we can add the ignored members now\n\t    for (let i = 0; i < ignoredMembers.length; i++) {\n            let currentMember = ignoredMembers[i];\n            let currentMemberLength = currentMember.length;\n\n            let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                traceStateBuilderArrayLength > 0 ? 1 : 0));\n            if (newExpectedLength <= maxTraceStateLength) {\n                // the comma seperator is added at the end when building the string\n                traceStateBuilderArray.push(currentMember);\n                // increment by length of added member + 1 (for the comma)\n                traceStateBuilderArrayLength += (currentMemberLength + (\n                    traceStateBuilderArrayLength > 0 ? 1 : 0));\n            }\n\t    }\n\t\n        // build the string with comma seperating the members\n\t    return traceStateBuilderArray.join(',');\n\t}\n\n    /**\n     * Returns the string representation of this object\n     * \n     * @override\n     */\n    toString() {\n        return \"{traceId=\" + this.getTraceId()\n            + \", spanId=\" + this.getSpanId()\n            + \", sampled=\" + this.isSampled\n            + \", traceState=\" + ((this.traceState == null) ? \"}\" : \"'\" + this.traceState + \"'}\");\n    }\n}\n\nmodule.exports.TraceContext = TraceContext;\n","\nconst { LogFormatter } = require('solclient-log');\nconst { Baggage } = require('./baggage');\nconst { TraceContext } = require('./message-trace-context');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\n/**\n * @classdesc\n * <b>This class is used to enable the distributed tracing \n * support for variety of Solace message types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @internal\n */\nclass MessageTracingSupport {\n\n  /**\n   * Represents OpenTelementry Support for Solace Messages.\n   * The solace.Message class will extend this class.\n   * \n   * @constructor\n   * @hideconstructor\n   * @private\n   **/\n  constructor() {\n    // empty constructor\n  }\n\n  /**\n   * Retrieves a {@link TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    if(this._traceContextSetter == null || this._traceContextSetter == undefined) {\n      // create a new context setter object\n      this._traceContextSetter = new TraceContextSetter();\n    }\n    return this._traceContextSetter;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {?solace.TraceContext} Transport context object associated with this message\n   */\n  getTransportContext() {\n    return this._transportContext;\n  }\n  /**\n   * The transport context setter\n   * \n   * @param {TraceContextSetter} contextSetter \n   */\n  _setTransportContext(contextSetter) {\n    if(contextSetter != null) {\n      this._transportContext = new TraceContext(contextSetter);\n    }\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {?solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // if there is no creation context, use the context setter to create it\n    return this._creationContext;\n  }\n  /**\n   * It is created only once by the producer/publisher and cannot be\n   * changed by intermediaries\n   * @param {TraceContextSetter} contextSetter \n   */\n  _setCreationContext(contextSetter) {\n    // set the creation context only once\n    if(contextSetter != null) {\n      this._creationContext = new TraceContext(contextSetter);\n    }\n  }\n \n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {?solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    return this._baggage;\n  }\n  /**\n   * The internal setter for the baggage prop.\n   * \n   * @param {Baggage} value \n   */\n  _setBaggage(value) {\n    this._baggage = value;\n  }\n}\n\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageOutcome } = require('./lib/message-outcomes');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageOutcome = MessageOutcome;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicSequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(message /*, flags*/) {\n    return ['HTTP Content Type', (message.getHttpContentType() !== undefined && message.getHttpContentType() !== null),\n      message.getHttpContentType(), null];\n  },\n\n  fpHttpContentEncoding(message /*, flags*/) {\n    return ['HTTP Content Encoding', (message.getHttpContentEncoding() !== undefined && message.getHttpContentEncoding() !== null),\n      message.getHttpContentEncoding(), null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (typeof cacheRequestId === 'number') {\n      return ['Cache Request Id', true, cacheRequestId, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n\n\n  fpTracingCreationContext(message, flags) {\n    const _creationContext = message.getCreationContext();\n\n    const isPresent = (_creationContext != null\n      && _creationContext.getTraceId() != null\n      && _creationContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_creationContext != null) ? _creationContext.toString() : null;\n    }\n    return ['Tracing CreationContext', isPresent, detailValue, null];\n  },\n\n  fpTracingTransportContext(message, flags) {\n    const _transportContext = message.getTransportContext();\n\n    const isPresent = (_transportContext != null\n      && _transportContext.getTraceId() != null\n      && _transportContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_transportContext != null) ? _transportContext.toString() : null;\n    }\n    return ['Trace Context SMF Parameter', isPresent, detailValue, null];\n  },\n\n  fpTracingBaggage(message, flags) {\n    const isPresent = (message.getBaggage() != null\n      && message.getBaggage().getBaggage() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      const _baggage = message.getBaggage();\n      detailValue = (_baggage != null) ? _baggage.getBaggage() : null;\n    }\n    return ['Tracing Baggage', isPresent, detailValue, null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of supported message settlement outcomes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageOutcome = {\n  /**\n   * Represents a successful message processing acknowledgement outcome.\n   *\n   * (see {@link solace.Message#acknowledge}) for more details\n   */\n  ACCEPTED:         0,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n   * the message.\n   * \n   * Delivery count for the message is incremented. Redelivery will be attempted. Message may\n   * be moved to DMQ once max-redelivered is reached. Message may be delayed if the endpoint has\n   * delayed redelivery configured.\n   */\n  FAILED:           1,\n  // /**\n  //  * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n  //  * the message.\n  //  * \n  //  * Delivery count for the message is NOT incremented. Redelivery will be attempted. Message may\n  //  * be moved to DMQ once max-redelivered is reached. \n  //  * A released message will always be eligible for redelivery, even if redeliveries are disabled. \n  //  * Message is immediately eligible for redelivery, even if endpoint is configured for delayed redelivery.\n  //  */\n  // RELEASED:           2,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application has rejected the\n   * message such as when application determines the message is invalid.\n   * \n   * Message will NOT be redelivered. Message will be moved to DMQ. If DMQ is not configured,\n   * message is deleted.\n   */\n  REJECTED:         3,\n};\n\nmodule.exports.MessageOutcome = Enum.new(MessageOutcome);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const { clone } = require('solclient-util'); // using the modified local clone version\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageOutcome } = require('./message-outcomes');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\nconst { Baggage, MessageTracingSupport, TraceContext, TraceContextSetter } = require('solclient-message-tracing');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; // Makes the accessor throw, never returned to user.\n\n  // for tracing support\n  message._traceContextSetter = null;\n  message._creationContext = null;\n  message._transportContext = null;\n  message._baggage = new Baggage();\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * Function called to clear extended var-len message properties\n * @param {Message} message The message to update\n * @internal\n */\nfunction clearExtendedVarLenParameters(message) {\n  // clear the tracing support params since\n  // they use extended var-len encoding\n  message._transportContext = null;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n * @extends solace.MessageTracingSupport\n */\nclass Message extends MessageTracingSupport {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    super(); // call the tracing support constructor\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {Uint8Array|String|null} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {Uint8Array|ArrayBufferLike|DataView|String|null|undefined} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {String|null|undefined} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object|String|null|undefined} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /**\n   * Gets the Http Content Encoding\n   * @returns {?String} the http content encoding, if set.\n   */\n    getHttpContentEncoding() {\n      return this._httpContentEncoding;\n    }\n  \n    /**\n     * Sets the Http Content Encoding\n     * @param {String} value The http content encoding.\n     */\n    setHttpContentEncoding(value) {\n      this._httpContentEncoding = isStringOrNothing(\"httpContentEncoding\", value);\n      if (this._httpContentEncoding === \"\") {\n        delete this._httpContentEncoding;\n      }\n    }\n  \n    /**\n     * Gets the Http Content Type\n     * @returns {?String} the http content type, if set.\n     */\n     getHttpContentType() {\n      return this._httpContentType;\n    }\n  \n    /**\n     * Sets the Http Content Type\n     * @param {String} value The http content type.\n     */\n    setHttpContentType(value) {\n      this._httpContentType = isStringOrNothing('httpContentType', value);\n      if (this._httpContentType === \"\") {\n        delete this._httpContentType;\n      }\n    }\n    \n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {Number|undefined} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   *\n   * @returns {Number|undefined} The delivery count reported by the broker.\n   * @throws {solace.OperationError} if endpoint does not report delivery count (message is not persistent).\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n\n  /**\n   * Settles this message in a requested way.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {solace.MessageOutcome} messageSettlementOutcome type of the settlement outcome, not expected to be {@code null}\n   * @throws {@link solace.OperationError}\n   *  * if broker does not support the specified outcome option;\n   *  * if the flow was created without specifying required {@link MessageOutcome}\n   *    Options within the consumer properties;\n   *  * if the associated {@link solace.Session} is configured\n   *    to use SUPPORTED_MESSAGE_ACK_AUTO (the default behaviour),\n   *    the use of {@link MessageOutcome#REJECTED}\n   *    and {@link MessageOutcome#FAILED} are not supported;\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connected\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   *    @see {@link solace.MessageOutcome}for detailed explanation of available options\n   */\n  settle(messageSettlementOutcome) {\n    // implementation here\n    // validation checks here\n    if (this._acked) {\n      throw new OperationError('Message can only be settled once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot settle a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot settle a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot settle using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot settle using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application settled`);\n      return;\n    }\n\n    // validate the settlement outcome and send correct Enum value\n    const settlementOutcome = messageSettlementOutcome;\n    if (MessageOutcome.values.indexOf(settlementOutcome) === -1) {\n      throw new OperationError(`Settlement outcome for message must be valid`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // check that the broker consumer session has support for the outcome and \n    const doesConsumerSupportOutcome = this._consumer.getProperties().requiredSettlementOutcomes.some(v => v === settlementOutcome);\n    // that the session was created with support for the outcome\n    if (settlementOutcome != MessageOutcome.ACCEPTED && !doesConsumerSupportOutcome) {\n      throw new OperationError(`solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)} not supported for this Message Consumer`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // actual settlement logic\n    this._consumer.applicationSettle(this._guaranteedMsgId, settlementOutcome);\n    this._acked = true; // also set as ACKed/settled\n  }\n\n  /**\n   * Returns whether settle(solace.MessageOutcome) has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isSettled() {\n    return this._acked || false;\n  }\n\n  /**\n   * Internal validation checks before we attempt to acknowledge this message.\n   * @private\n   */\n  _validateBeforeAcknowledge() {\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n  }\n\n  /**\n   * Acknowledges this message.\n   * This is the same as calling {@link solace.Message#settle(solace.MessageOutcome.ACCEPTED)}.\n   * Internally uses Message.settle() with the ACCEPTED MessageOutcome.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application acknowledge`);\n      return;\n    }\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, false);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Used by the message-dispatcher to auto-acknowledge this message.\n   * @internal\n   */\n  _autoAcknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, true);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  /*\n   * returns a compressed binary attachment\n   * Used internally on the encode path.\n   * @returns {Uint8Array} A compressed array based on the binaryAttachment\n   * @private\n   */\n  _getCompressedBinaryAttachment() {\n    return this._compressedBinaryAttachment;\n  }\n  \n  /*\n   * Sets the compressed attachment for the messsage \n   * based on the level that was set in payloadCompressionLevel\n   * Used internally on the encode path.\n   * @param {Uint8Array} value sets the compressed attachment\n   * @private \n   */\n  _setCompressedBinaryAttachment(value) {\n    this._compressedBinaryAttachment = value;\n  }\n\n  /*\n   * Used internally on the decode path, it's the flag from the preamble.\n   * @returns {Boolean} value if the binary attachment was compressed\n   * @private \n   */\n  _getPayloadCompressed() {\n    return this._payloadCompressed; \n  }\n\n  /*\n   * Used internally on the decode path, it's the flag from the preamble.\n   * @param {Boolean} \n   * @private \n  */\n  _setPayloadCompressed(value) {\n    this._payloadCompressed = value;\n  }\n\n  // Message Tracing Section\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    // return the parent method\n    return super.getTraceContextSetter();\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getCreationContext();\n  }\n \n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {solace.TraceContext} Transport context object associated with this message;\n   */\n  getTransportContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getTransportContext();\n  }\n\n  /**\n   * Set the transport context.\n   * Called when the message is received from broker\n   * \n   * @param {solace.TraceContextSetter} contextSetter \n   */\n  setTransportContext(contextSetter) {\n    // call the parent method.\n    super._setTransportContext(contextSetter);\n  }\n\n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    // returns the parent method baggage instance\n    // used for setting and retriving the baggage value \n    return super.getBaggage();\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n\n  /**\n   * Clears all extended var-len message properties on this message.\n   * The message no longer has any extended variable length\n   * properties set.\n   * \n   * @internal\n   */\n  clearExtendedVarLenParams() {\n    clearExtendedVarLenParameters(this);\n  }\n}\n\n/**\n * A standard property key that clients should use if they want to\n * group messages into different queue partitions.\n * Expected value is UTF-8 encoded up to 255 bytes long string.\n */\nMessage.SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY = 'JMSXGroupID';\n\nmodule.exports.Message = Message;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\nconst { EndpointNameComplaint, explainInvalidEndpointName } = require('./lib/endpoint-name-complaint');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\nmodule.exports.EndpointNameComplaint = EndpointNameComplaint;\nmodule.exports.explainInvalidEndpointName = explainInvalidEndpointName;\n\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n// Enum name, regexp, enum value, TE applicable\nconst nameChecks = [\n  [\"EMPTY_STRING\", /^$/, \"Zero length\", true],\n  [\"LT\", /</, \"Less than sign (<)\", true],\n  [\"GT\", />/, \"Greater than sign (>)\", true],\n  [\"ASTERISK\", /\\*/, \"Asterisk (*)\", true],\n  [\"QUESTION_MARK\", /\\?/, \"Question mark (?)\", true],\n  [\"AMPERSAND\", /&/, \"Ampersand (&)\", true],\n  [\"SEMICOLON\", /;/, \"Semicolon (;)\", true],\n  [\"LEADING_SLASH\", /^\\//, \"Starts with a slash (/).\", false],\n  [\"TRAILING_SLASH\", /\\/$/, \"Ends with a slash (/).\", false],\n  [\"DOUBLE_SLASH\", /\\/\\//, \"Empty level (//)\", false],\n  [\"TOO_LONG\", /.{200,}/, \"Longer than 200 characters\", true],\n  //[\"NO_ISSUE\", undefined, \"\"]\n];\n\n/**\n * The most frequent problems with endpoint names.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst EndpointNameComplaint = {\n  EMPTY_STRING: \"Zero length\",\n  LT: \"Less than sign (<)\",\n  GT: \"Greater than sign (>)\",\n  ASTERISK: \"Asterisk (*)\",\n  QUESTION_MARK: \"Question mark (?)\",\n  AMPERSAND: \"Ampersand (&)\",\n  SEMICOLON: \"Semicolon (;)\",\n  LEADING_SLASH: \"Starts with a slash (/).\",\n  TRAILING_SLASH: \"Ends with a slash (/).\",\n  DOUBLE_SLASH: \"Empty level (//)\",\n  TOO_LONG: \"Longer than 200 characters\",\n  NO_ISSUE: \"\"\n};\n\n//This should work, but the typescript generator doesn't like it.\n/*\nconst EndpointNameComplaint = {};\nnameChecks.forEach((triplet)=>{\n  EndpointNameComplaint[triplet[0]] = triplet[2];\n})\n*/\n\nfunction explainInvalidEndpointName(name, isTE) {\n  //complaints are ordered by probability\n  for (i in nameChecks) {\n    const triplet = nameChecks[i];\n    if (isTE && !triplet[3]) {\n      // Slash-related issues are queue only, so those rules are marked \"false\" in the check list.\n      continue;\n    }\n    if (name.match(triplet[1])) {\n      return triplet[2];\n    }\n  }\n  // This is an empty string because it's falsy.\n  return EndpointNameComplaint.NO_ISSUE;\n} \t\n\nmodule.exports.EndpointNameComplaint = Enum.new(EndpointNameComplaint);\n//module.exports.EndpointNameComplaint = EndpointNameComplaint;\nmodule.exports.explainInvalidEndpointName = explainInvalidEndpointName;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} [queueSpec.name=null] The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName() || ''}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, 2 ** 32 -1]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, 2 ** 32 -1]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object, or to {@link solace.Session#provisionEndpoint} .\n * Upon creation of a queue or TE, undefined\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : undefined,\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n * @private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  sdtstream.rewind();\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  sdtstream.rewind();\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * <b>Deprecated</b> If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { ProvisionEvent } = require('./lib/provision-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.ProvisionEvent = ProvisionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   * @deprecated since broker v9.10.0.12\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n  /**\n   * Support for ApplicationAck optional outcomes \"failed\" and \"rejected\".\n   */\n  AD_APP_ACK_FAILED:            30,\n  /**\n   * Broker supports variable-length SMF extended parameters.\n   */\n  VAR_LEN_EXT_PARAM:            31,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n  /**\n   * Indicates whether a client supports Partitioned Queues\n   * and whether a PartitionGroupId will be proccessed in a BindResponse message.\n   * Always true\n   * \n   * @since 10.12.0\n   */\n   PQ: 2,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n      // Assuming NACKs until proven otherwise (we have code to handle it missing on reconnect):\n      [CapabilityType.AD_APP_ACK_FAILED]: true,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    // call this to initialize the _mutableState property\n    this.reset(); \n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      // finished DNS resolution checks\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","const { SessionEvent } = require('./session-event');\n\nclass ProvisionEvent extends SessionEvent {\n  /**\n   * @constructor\n   * @param {solace.SessionEventCode} sessionEventCode The event code\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @param {QueueDescriptor} queueDescriptor Endpoint name and type as returned by the broker\n   * @param {QueueProperties} queueProperties Endpoint proerties as returned by the broker\n   * @private\n   */\n  constructor(\n      sessionEventCode,\n      infoStr,\n      responseCode = undefined,\n      errorSubcode = 0,\n      correlationKey = undefined,\n      reason = undefined,\n      queueDescriptor = null,\n      queueProperties = null) {\n  super([], sessionEventCode, infoStr, responseCode, errorSubcode, correlationKey, reason );\n  this._queueDescriptor = queueDescriptor;\n  this._queueProperties = queueProperties;\n  }\n\n\n  /**\n   * @type {QueueDescriptor}\n   * @description The endpoint name and type as returned by the broker\n   * in the provisioin/deprovision response, if any.\n   * Durability is not set.\n   * Mostly relevant when the endpoint name was not provided in the provision call.\n   * @default null\n   */\n  get queueDescriptor() {\n    return this._queueDescriptor;\n  }\n\n  /**\n   * @internal\n   */\n  set queueDescriptor(value) {\n    this._queueDescriptor = value;\n  }\n\n  /**\n   * @type {QueueProperties}\n   * @description The endpoint properties as returned by the broker\n   * in the provisioin/deprovision response, if any.\n   * Mostly relevant in case of an ENDPOINT_PROPERTY_MISMATCH provision error.\n   * @default null\n   */\n  get queueProperties() {\n    return this._queueProperties;\n  }\n\n  /**\n   * @internal\n   */\n  set queueProperties(value) {\n    this._queueProperties = value;\n  }\n  \n  [util_inspect_custom]() {\n    const result = super[util_inspect_custom]();\n    result.queueDescriptor = this._queueDescriptor;\n    result.queueProperties = this._queueProperties;\n    return result;\n  }\n\n}\n\nmodule.exports.ProvisionEvent = ProvisionEvent;\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n  /**\n   * The provision or deprovision operation failed.\n   * @event solace.SessionEventCode#PROVISION_ERROR\n   * @param {solace.SessionEvent} error The details related to the failed provision/deprovison operation.\n   */\n  PROVISION_ERROR:                    30,\n  /**\n   * The provision or deprovision operation succeeded.\n   * @event solace.SessionEventCode#PROVISION_OK\n   * @param {solace.SessionEvent} event The details related to the successful provision or deprovision operation.\n   */\n  PROVISION_OK:                     31,\n\n  \n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     * @default null\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageOutcome,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\n\nconst {\n  anythingToBuffer,\n} = Convert;\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\nconst zlib = require('zlib');\nconst fflate = require('fflate');\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        // clear connectTimer, if it is still running\n        fsm.clearConnectTimer();\n\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.clearConnectTimer(); // clear connectTimer, while destroying the transport\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this); // this._transport == null at this point \n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        fsm.clearConnectTimer(); // clear connectTimer, once we successfully connect\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the consumer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const consumerProperties = consumer.getProperties();\n    if (consumerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(consumerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n\n    const { LOG_WARN } = this.logger;\n\n    // check for whether the broker session supports the capabilities\n    const settlementOutcomes = consumerProperties.requiredSettlementOutcomes;\n    if (settlementOutcomes && settlementOutcomes.length > 0) {\n      // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n      const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n      if(isNackRequired && !this._session.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n        const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n          settlementOutcomes.map(v => `solace.MessageOutcome.${MessageOutcome.nameOf(v)}`).join(', ')\n        } ]`;\n        // log the operation error as a Warning\n        LOG_WARN(outcomeNotSupportedError);\n        // then throw the error here\n        throw new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION, null);\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n         // console.log('ADCTRL message:');\n         // console.log(message);\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      let result = false;\n      if(this._correlatedReqs) {\n        result = delete this._correlatedReqs[correlationTag];\n      }\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    const {LOG_WARN, LOG_DEBUG} = this.logger\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      // compress payload if session property is enabled\n      if (this._sessionProperties.payloadCompressionLevel > 0 && ((Check.anything(message._binaryAttachment) && message._binaryAttachment.length > 0) || Check.anything(message._structuredContainer)) ){\n        let compressedAttachment;\n        let origSize = 0;\n        try {\n          if (BUILD_ENV.TARGET_NODE){\n            const options = {\n              level: this._sessionProperties.payloadCompressionLevel,\n              flush: zlib.constants.Z_FINISH\n            };\n            if(Check.anything(message.getSdtContainer())){\n              // const encodedContainer = SDTCodec.encodeSingleElement(message._structuredContainer);\n              const encodedContainer = SDTCodec.encodeSingleElement(message.getSdtContainer());\n              origSize = encodedContainer.length;\n              compressedAttachment = zlib.deflateSync(encodedContainer, options);\n\n            } else {\n              origSize = message._binaryAttachment.length;\n              compressedAttachment = zlib.deflateSync(message._binaryAttachment, options);\n            }\n          } else { //browser\n            const options = {\n              level: this._sessionProperties.payloadCompressionLevel,\n              flush: fflate.Z_FINISH\n            };\n            if(Check.anything(message.getSdtContainer())){\n              const encodedContainer = SDTCodec.encodeSingleElement(message.getSdtContainer());\n\n              const textEncoded = anythingToBuffer(encodedContainer);\n              origSize = textEncoded.length;\n              compressedAttachment = fflate.zlibSync(textEncoded, options);\n            } else {\n              origSize = message._binaryAttachment.length;\n              compressedAttachment = fflate.zlibSync(message._binaryAttachment, options);\n            }\n            compressedAttachment = anythingToBuffer(compressedAttachment);\n          }\n          \n          // This does not consider the size growth from adding \"deflate\" to the ce.\n          // If there alread was a ce: \", deflate\".length = 9 bytes.\n          // If there was no ce but there already was something else in the header map: 15 bytes.\n          // If there was nothing in the header map nor the user property map: 47 bytes.\n          // (use testContext.m_session.getStat(solace.StatType.TX_TOTAL_DATA_BYTES) in a test to \t)\n          if (compressedAttachment.length + 9 < origSize) {\n            message._setCompressedBinaryAttachment(compressedAttachment);\n            Check.nothing(message.getHttpContentEncoding()) ? message._compressedCE = \"deflate\" : message._compressedCE = message.getHttpContentEncoding() + \", deflate\";\n          } else {\n            // It would be nice to cache the encodedContainer instead of re-encoding it right away.\n            LOG_DEBUG(\"Not compressing because it grows the payload! \"+ origSize + \" -> \"+ compressedAttachment.length + \"+ 9\");\n          }\n        } catch(err) {\n          // if error occurred when compressing pass the normal binary attachment\n          LOG_WARN(\"Error occurred while compressing, message attachment was not compressed. Original attachment will be sent. \", err);\n        }\n      }\n    \n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n      // Clear internal-use field to free up memory and allow message object reuse by client code.\n      if (Check.anything(message._getCompressedBinaryAttachment())){\n        message._setCompressedBinaryAttachment();\n      }\n      delete message._compressedCE;\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    \n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisited.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    //const DebugLib = require('solclient-debug');\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    //console.log(\"content:\");\n    //console.log(DebugLib.Debug.formatDumpBytes( content.toString('latin1'), true, 2));\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  provisionEndpoint(queueDescriptior, queueProperties, correlationKey, callback) {\n    const { LOG_DEBUG } = this.logger;\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const message = SMFLib.AdProtocolMessage.getCreate(queueDescriptior, queueProperties, correlationTag);\n    LOG_DEBUG(\"Sending CREATE request\");\n    const rc = this.send(message);\n    if (rc !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Provision failed', TransportLib.TransportReturnCode.describe(rc));\n      return rc;\n    }\n    LOG_DEBUG(\"Saving correlation tag \" + correlationTag + \" for CREATE request\");\n    this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        null, //timeout handler\n        0, // timeout in ms\n        correlationKey,\n        callback);\n  }\n\n  deprovisionEndpoint(queueDescriptior, correlationKey, callback) {\n    const { LOG_DEBUG } = this.logger;\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const message = SMFLib.AdProtocolMessage.getDelete(queueDescriptior, correlationTag);\n    LOG_DEBUG(\"Sending DELETE request\");\n    const rc = this.send(message);\n    if (rc !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Deprovision failed', TransportLib.TransportReturnCode.describe(rc));\n      return rc;\n    }\n\n    LOG_DEBUG(\"Saving correlation tag \" + correlationTag + \" for DELETE request\");\n    this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        null, //timeout handler\n        0, // timeout in ms\n        correlationKey,\n        callback);\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {Boolean} force Ignore the socket buffer size limit and stuff the request in.\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     force,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg, undefined, force);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {Boolean} force Ignore the socket buffer size limit and stuff the request in.\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          force,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg, undefined, force);\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n    v('payloadCompressionLevel', [valNumber], [valRange, 0, 9]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n    _payloadCompressionLevel:   0,\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @default null\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @default null\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description An array of TLS protocols to be excluded when negotiating which protocol\n   * to use.\n   *  * Allowed values are: TLSv1, TLSv1.1, TLSv1.2\n   *  * Note: when a protocol version is excluded without excluding all of its\n   *    previous protocol versions, the effect is to also exclude all subsequent\n   *    protocol versions.\n   * @default null\n   * @target node\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'sslExcludedProtocols':     this.sslExcludedProtocols,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties|null|undefined}\n   * @default undefined\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  // ================== PAYLOAD COMPRESSION ========================\n  /**\n   * @name solace.SessionProperties#payloadCompressionLevel\n   * @type {Number}\n   * @description Valid values for the payload compression level to be applied to the payload of a message published by a client are 0-9.\n   * <p> Value meanings: </p>\n   * <ul>\n   * <li> 0 - disable payload compression (the default) </li>\n   * <li> 1 - lowest CPU impact </li>\n   * <li> 9 - highest compression </li>\n   * </ul>\n   * Values 1-9 are passed straight to zlib, 0 disables the payload compression feature on outgoing messages.\n   * No impact on payload-compressed incoming messages. \n   * <p>\n   * Default: 0\n   * </p>\n   * @default 0\n   */\n  get payloadCompressionLevel(){\n    return Check.nothing(this._payloadCompressionLevel)? 0 : this._payloadCompressionLevel;\n  }\n  set payloadCompressionLevel(newValue){\n    this._payloadCompressionLevel = newValue;\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n      'payloadCompressionLevel':          this.payloadCompressionLevel\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for SSL connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using SSL connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using SSL connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        NotImplementedError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor, QueueProperties, QueuePropertiesValidator,\n        QueueType, explainInvalidEndpointName } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { ProvisionEvent } = require('./provision-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n * @fires solace.SessionEventCode#PROVISION_OK\n * @fires solace.SessionEventCode#PROVISION_ERROR\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      false, //observe socket buffer size constraint, return NO_SPACE if full.\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send unsubscribe request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send unsubscribe request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              // TODO: handle transport error?\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  true, // force beyond socket buffer limit because there's no error handling\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n              // TODO: handle transport error?\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    true, // force beyond socket buffer limit because there's no error handling\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n              // TODO: handle transport error?\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              true, // force beyond socket buffer limit because there's no error handling\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n\n    // check to see if we can send variable length params to the broker\n    if (!this.isCapable(CapabilityType.VAR_LEN_EXT_PARAM)) {\n      LOG_TRACE('Broker session does not support VAR LEN SMF extended parameters');\n      // clear these message properties since var-len extended\n      // properties not supported on broker\n      message.clearExtendedVarLenParams();\n\n      // throw error if these extended var-length message properties are set\n      if(this._failOnExtendedVariableLengthProperties(message)) {\n        throw new OperationError(\n          'Broker does not support variable length SMF extended parameters',\n          ErrorSubcode.INVALID_OPERATION);\n      }\n    }\n    this.validateAndSendMessage(message);\n  }\n\n  _failOnExtendedVariableLengthProperties(message) {\n    return false; // return false since no properties for now\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   * <br>\n   * <strong>Note:</strong>\n   * The API sets the correlationId and replyTo fields of the message being sent;\n   * this overwrites any existing correlationId and replyTo values on the message.\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n \n  /**\n   * Provisons a queue or topic endpoint on the broker without binding a flow or adding a subscription.\n   * The function returns immediately (unless the parameters fail validation in which case an exception is thrown),\n   * but the actual outcome of the operation on the broker is only reported later \n   * in the form of a POVISION_OK or PROVISION_ERROR session event.\n   * Make sure to subscribe for those when using this fuction.\n   *\n   * @param {solace.QueueDescriptor} queueDescriptor The name and type (queue or TE) of the endpoint. Only durable endpoints supported currently.\n   * @param {solace.QueueProperties} queueProperties Optional, in-out parameter.\n   *  In: Properties of the Queue/TE to be created. Empty or undefined fields are left to broker defaults.\n   *  Out (on PROVISION_OK, not on function return): Properties of the endpoint as created.\n   * @param {boolean} ignoreExists Makes the operation idempotent if true, by ignoring \"endpoint already exists\" errors.\n   * @param {Object|String|null|undefined} correlationKey If specified, this is the value identifying the operation \n   * in the resulting PROVISION_OK or PROVISION_ERROR session event {@link SessionEvent}\n   *\n   * @throws {solace.OperationError}  \n   */\n  provisionEndpoint(queueDescriptor, queueProperties, ignoreExists, correlationKey) {\n    Parameter.isBooleanOrNothing('ignoreExists', ignoreExists);\n    Parameter.isInstanceOf('queueDescriptor', queueDescriptor, Object, ErrorSubcode.PARAMETER_INVALID_TYPE, \"queueDescriptor must be supplied, can't be \"+queueDescriptor);\n    Parameter.isString('queueDescriptor.name', queueDescriptor.name, ErrorSubcode.PARAMETER_INVALID_TYPE, \"provisionEndpoint only works on named endpoints\");\n    // Cloning to apply the durable:true default.\n    const queueDescriptor2 = new QueueDescriptor(queueDescriptor);\n    if (!queueDescriptor2.durable) {\n      throw new NotImplementedError('provisionEndpoint() only works for durable endpoints.');\n      //console.log(\"Temporarily allowing durable Create.\");\n    }\n    if (queueProperties) {\n      Parameter.isInstanceOfOrNothing('queueProperties', queueProperties, Object, ErrorSubcode.PARAMETER_INVALID_TYPE, \"queueProperties must be an object, ideally a solace.QueueProperties instance. Can't be \"+queueProperties);\n      QueuePropertiesValidator.validate(queueProperties);\n    }\n    const callback = this.handleProvisionResponse.bind(this, ignoreExists, true);\n    return this._sessionFSM.provisionEndpoint(queueDescriptor2, queueProperties, correlationKey, callback);\n\n\n  }\n\n  /**\n   * Deprovisons a queue or topic endpoint on the broker.\n   * The function returns immediately (unless the parameters fail validation in which case an exception is thrown),\n   * but the actual outcome of the operation on the broker is only reported later \n   * in the form of a POVISION_OK or PROVISION_ERROR session event.\n   * Make sure to subscribe for those when using this fuction.\n   *\n   * @param {solace.QueueDescriptor} queueDescriptor The name and type (queue or TE) of the endpoint. Durability is ignored.\n   * @param {boolean} ignoreMisssing Makes the operation idempotent if true, by ignoring \"endpoint doesn't exist\" errors.\n   * @param {Object|String|null|undefined} correlationKey If specified, this is the value identifying the operation \n   * in the resulting PROVISION_OK or PROVISION_ERROR session event {@link SessionEvent}\n   *\n   * @throws {solace.OperationError}  \n   */\n  deprovisionEndpoint(queueDescriptor, ignoreMissing, correlationKey) {\n    Parameter.isBooleanOrNothing('ignoreMissing', ignoreMissing);\n    if (!(queueDescriptor instanceof Object)) {\n      throw new OperationError('queueDesscriptor object required', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    Parameter.isString('queueDescriptor.name', queueDescriptor.name, ErrorSubcode.PARAMETER_INVALID_TYPE, \"deprovisionEndpoint only works on named endpoints\");\n\n    // Leaving the last two parameters, the SMF response object and the CorrelatedRequest, unbound.\n    const callback = this.handleProvisionResponse.bind(this, ignoreMissing, false);\n\n    return this._sessionFSM.deprovisionEndpoint(queueDescriptor, correlationKey, callback);\n\n  }\n\n  /**\n   * Internal callback for provision/deprovision response handling.\n   * @param {solace.QueueProperties} queueProperties to update from the response (provision only)\n   * @param {boolean} ignore ignoreMissing or ignoreExists was set.\n   * @param {boolean} provision true for provision, false for deprovision.\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleProvisionResponse(ignore, provision, msg, request) {\n    const {correlationKey} = request;\n    const responseCode = msg._smfHeader.pm_respcode;\n    const responseString = msg._smfHeader.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);   \n    const queueDescriptor = new QueueDescriptor();\n    queueDescriptor.durable = undefined;\n    const queueProperties = new QueueProperties();\n    const { DestinationUtil } = DestinationLib;\n\n    if (msg.getQueueNameBytes() && msg.getQueueNameBytes().length > 0) {\n      queueDescriptor.name = DestinationUtil.decodeBytes(msg.getQueueNameBytes()); \n      queueDescriptor.type = QueueType.QUEUE;\n    } else if (msg.getTopicEndpointBytes() && msg.getTopicEndpointBytes().length > 0) {\n      queueDescriptor.name = DestinationUtil.decodeBytes(msg.getTopicEndpointBytes()); \n      queueDescriptor.type = QueueType.TOPIC_ENDPOINT;\n    } else {\n      queueDescriptor.name =  undefined;\n      queueDescriptor.type = undefined;\n    }\n\n    queueDescriptor.durable = msg.getDurability();\n    queueProperties.accessType = msg.getAccessType();\n    queueProperties.discardBehavior = msg.getQueueDiscardBehavior();\n    queueProperties.maxMessageRedelivery = msg.getMaxRedelivery();\n    queueProperties.maxMessageSize = msg.getMaxMsgSize();\n    queueProperties.permissions = msg.getAllOthersPermissions();\n    queueProperties.quotaMB = msg.getQuota();\n    queueProperties.respectsTTL = msg.getRespectsTTL();\n\n    let reason = null;\n    if ((responseCode === 400) && (errorSubcode === ErrorSubcode.INVALID_QUEUE_NAME || errorSubcode === ErrorSubcode.INVALID_TE_NAME)) {\n      reason = explainInvalidEndpointName(queueDescriptor.name);\n    }\n\n\n    let outcome = SessionEventCode.PROVISION_ERROR;\n    if (responseCode === 200) {\n      outcome = SessionEventCode.PROVISION_OK;\n    } else {\n      if (ignore && provision && errorSubcode == ErrorSubcode.ENDPOINT_ALREADY_EXISTS)  {\n        outcome = SessionEventCode.PROVISION_OK;\n      } else if (ignore && !provision && (errorSubcode == ErrorSubcode.UNKNOWN_QUEUE_NAME || errorSubcode == ErrorSubcode.UNKNOWN_TOPIC_ENDPOINT_NAME) ) {\n        outcome = SessionEventCode.PROVISION_OK;\n      }\n    }\n\n    const provisionEvent = new ProvisionEvent(outcome,\n        responseString,\n        responseCode,\n        errorSubcode,\n        correlationKey,\n        reason,\n        queueDescriptor,\n        queueProperties);\n    this.sendEvent(provisionEvent);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max, outcome = undefined) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  const paramLength = (outcome == undefined || outcome === 0) ? 18 : 19;\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(paramLength)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  if(outcome != undefined && outcome > 0) { // skip for MessageOutcome.ACCEPTED\n    data.push(Convert.int8ToStr(outcome)); // write the settlement outcome\n  }\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n      case SMFLib.SMFAdProtocolParam.PARTITION_GROUP_ID:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue(); // this is the Map() of all settlement ACK/NACK ranges\n          const uh = param.getUh();\n          const type = param.getType();\n          // iterate through the Map of ranges per settlement outcome\n          ranges.forEach((settlementRanges, outcome) => {\n            for (let i = 0; i < settlementRanges.length; ++i) {\n              const range = settlementRanges[i];\n              paramspace.push(encAdp64AckPairParam(uh,\n                                                   type,\n                                                   range[0],\n                                                   range[1],\n                                                   outcome));\n            }\n          });\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst { Baggage, TraceContextSetter } = require('solclient-message-tracing');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long, Convert: { stringToUint8Array, anythingToBuffer } } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\nconst zlib = require('zlib');\nconst fflate = require('fflate');\nconst { Check } = require('solclient-validate');\n\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR,\n        LOG_WARN } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    let preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x40) !== 0){\n      message._setPayloadCompressed(preambleByte0);\n    }\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n      const ce = headerMap.getField('ce');\n      const ct = headerMap.getField('ct');\n\n      const bag = headerMap.getField('bag'); // get the baggage field\n      const ctx = headerMap.getField('ctx'); // the message creation context field\n\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n      if (ce) {\n        message.setHttpContentEncoding(ce.getValue());\n      }\n      if (ct) {\n        message.setHttpContentType(ct.getValue());\n      }\n      if (bag) {\n        // set the baggage\n        const _baggageObj = new Baggage();\n        _baggageObj.setBaggage(bag.getValue());\n        message._setBaggage(_baggageObj);\n      }\n      if (ctx) {\n        // create a context setter from the bytes or string depending on the active profile\n        const _traceContextSetter = TraceContextSetter.fromTraceContext(ctx.getValue());\n         // use it to set the message creation context, can be null\n        message._setCreationContext(_traceContextSetter);\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // set the trace span transport context for the message if present\n  if (smfHeader.pm_ts_transport_context) {\n    // create a context setter from the bytes\n    const _traceContextSetter = TraceContextSetter.fromTraceContext(smfHeader.pm_ts_transport_context);\n    // use it to create the transport context\n    message._setTransportContext(_traceContextSetter);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n  // uncompress message\n  if(message._getPayloadCompressed() && Check.anything(message.getHttpContentEncoding())){\n    if (message.getHttpContentEncoding().endsWith('deflate')){\n        try {\n          let inflatedAttachment;\n          if (BUILD_ENV.TARGET_NODE) {\n            inflatedAttachment = zlib.inflateSync(message._binaryAttachment);\n          } else {\n            inflatedAttachment = fflate.unzlibSync( message._binaryAttachment);\n            inflatedAttachment = anythingToBuffer(inflatedAttachment);\n          }\n          message._setBinaryAttachment(inflatedAttachment);\n          message._setPayloadCompressed(null);\n\n          // Popping \"deflate\" off the end of the content encoding list.\n          if (message.getHttpContentEncoding().trim() === \"deflate\") {\n            delete message._httpContentEncoding;\n          } else {\n            let newCE = message.getHttpContentEncoding().slice(0, 0-\"deflate\".length).trimRight()\n              if (newCE.endsWith(\",\")) {\n                newCE = newCE.slice(0, -1);\n                message.setHttpContentEncoding(newCE);\n              } else {\n                delete message._httpContentEncoding;\n\t      }\n          }\n        } catch(err){\n          LOG_WARN(\"Message payload was not decompressed, there was an error. Leaving the message body compressed \", err)\n          //LOG_WARN(message.dump());\n          message._messageType = SolclientMessageLib.MessageType.BINARY;\n        }\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n  uint8ArrayToString,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n  FORCED_LENGTH_MODE,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n  addToMapIfPresent(headerMap, 'ce', SDTFieldType.STRING, message._compressedCE ? message._compressedCE : message.getHttpContentEncoding());\n  addToMapIfPresent(headerMap, 'ct', SDTFieldType.STRING, message.getHttpContentType());\n\n  // the baggage value in the correct format. See - https://www.w3.org/TR/baggage/\n  const _baggage = message.getBaggage();\n  addToMapIfPresent(headerMap, 'bag', SDTFieldType.STRING, (_baggage ? _baggage.getBaggage() : null));\n  // message creation context will never be null\n  // set the encoded bytes into the map\n  const _creationContext = message.getCreationContext();\n  addToMapIfPresent(\n    headerMap, 'ctx', SDTFieldType.BYTEARRAY,\n    (_creationContext ? _creationContext.getEncodedTraceContext() : null)\n  );\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n\n  if (Check.anything(message._getCompressedBinaryAttachment())){\n    preambleByte0 |= 0x40;\n  }\n  \n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      } \n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      } \n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      }\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  // get the transport context, if available\n  const _transportContext = message.getTransportContext();\n  if(_transportContext != null) {\n    // set the encoded Uint8 array into the header property\n    smfHeader.pm_ts_transport_context = _transportContext.getEncodedTraceContext();\n  }\n  \n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      message.getCreationContext() ||\n      message._compressedCE ||\n      message.getHttpContentEncoding() ||\n      message.getHttpContentType() ||\n      (message.getBaggage() && message.getBaggage().getBaggage()) ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    if (Check.anything(message._getCompressedBinaryAttachment())){\n      addContentElementToArrays(csumm, payload, \n        message._getCompressedBinaryAttachment().toString('latin1'), ContentSummaryType.BINARY_ATTACHMENT);\n    } else {\n      addContentElementToArrays(csumm, payload,\n        message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n    }\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_ts_transport_context) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.TS_TRANSPORT_CONTEXT,\n                                                     uint8ArrayToString(header.pm_ts_transport_context),\n                                                     FORCED_LENGTH_MODE.SIX);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.FORCED_LENGTH_MODE = {\n  FIVE:  5,\n  SIX:   6\n};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value, forcedLengthMode = -1) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n\n  // prevent unsupported value from breaking default behaviour\n  if(forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) {\n    forcedLengthMode = -1;\n  }\n\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (\n    ((length < 253) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.FIVE)\n  ) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (\n    ((length < 256 * 256 - 4) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.SIX)\n  ) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      case SMFExtendedParameterType.TS_TRANSPORT_CONTEXT:\n        // from specs, trace span context must be at least 36 bytes\n        // use 36 - 4 (account for error in 2-byte variable length value calculation above) = 32\n        if(valueLen >= 32) {\n          // will convert this string to a UInt8Array later\n          smfHeader.pm_ts_transport_context = dataBuf.toString('latin1', pos, pos + valueLen);\n        } else {\n          LOG_TRACE('Skipped due to unexpected size of extended parameter ' +\n                    `type ${type} value length ${valueLen} offset ${pos}`);\n        }\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          // this is some kind of AD publisher ID in a direct message, but it's ony 4 bytes.\n          // It's of no use to us and is not exposed publicly.\n          // Skip.\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { MessageOutcome } = require('solclient-message');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DUARBILITY_INT_TO_BOOL = {\n  1: true,  // durable\n  2: false, // non-durable guaranteed\n  3: false  // non-durable reliable\n}\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} Durability (durable vs non-durable), if present\n   */\n  getDurability() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_DURABLE, strToInt8, bUInt8);\n    if (param === 3) {\n      LOG_INFO(\"Non durable reliable queue. This does not happen often.\");\n    }\n    return DUARBILITY_INT_TO_BOOL[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated topic endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated queue name\n   */\n  getQueueNameBytes() {\n    return this._readParameter(SMFAdProtocolParam.QUEUENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The partitionGroupId, if present\n   */\n  getPartitionGroupId() {\n    return this._readParameter(SMFAdProtocolParam.PARTITION_GROUP_ID,\n                               strToInt16, bUInt16BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      (queueDescriptor.durable ? 1 : 2) // Durable vs Non-Durable-Guaranteed\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Creates a DELETE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request, ignoring durability\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getDelete(\n    queueDescriptor,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.DELETE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   *  @param {Long} [partitionGroupId=undefined] Partition Group ID for support of\n   *          Partition Queue feature, associate new flow with the same\n   *          PartitionGroupId as an old flow (e.g due to a reconnect).\n   * @param {Boolean} [hasNackSupport=false] If true, flow is created with Consumer Redelivery\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined,\n                                partitionGroupId = undefined,\n                                hasNackSupport = false) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    /**\n     * A Flow that has Browser support cannot have NACK support \n     */\n    if (hasNackSupport /* is true */) {\n      // [AssuredCtrl FlowType Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x3 // create flow with Consumer Redelivery support\n      ));\n    } else if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2 // create flow with browser support\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    // support for PartitionGroupId. Only send when not null and undefined\n    if (partitionGroupId !== undefined && partitionGroupId !== null) {\n      // [AssuredCtrl PartitionGroupId Parameter]    ***\n      LOG_TRACE(`Adding partitionGroupId to message: ${partitionGroupId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.PARTITION_GROUP_ID,\n        partitionGroupId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Map.<Array.<Array.<Long>>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `Map.set( MessageOutcome.ACCEPTED, [ [singleMessageId, singleMessageId] ] )`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && (applicationAckRanges.size > 0)) {\n      // aggregate the total length of the ack/nack ranges\n      let totalRangeLen  = 0;\n      const allOutcomes = MessageOutcome.values;\n      for(let i = 0; i < allOutcomes.length; i ++) {\n        totalRangeLen += applicationAckRanges.has(allOutcomes[i]) ? applicationAckRanges.get(allOutcomes[i]).length : 0;\n      }\n\n      if (totalRangeLen > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n  CapabilityType.AD_APP_ACK_FAILED,\n  CapabilityType.VAR_LEN_EXT_PARAM,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n  [ClientCapabilityType.PQ, 0x20],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID, ClientCapabilityType.PQ]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n    this.pm_ts_transport_context = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n  PARTITION_GROUP_ID:                      0x38,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n  PARTITION_KEY_HASH:       0x35, // @Todo: not yet implemented as improvement for PQ\n  TS_TRANSPORT_CONTEXT:     0x36,\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n  /**\n   * Count of received persistent and non-persistent messages that were rejected.\n   */\n  RX_SETTLE_REJECTED:       44,\n  /**\n   * Count of received persistent and non-persistent messages that were failed.\n   */\n  RX_SETTLE_FAILED:         45,\n  /**\n   * Count of received persistent and non-persistent messages that were accepted manually (no auto-acks).\n   */\n  RX_SETTLE_ACCEPTED:       46,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    // added check to prevent it returning as undefined/null\n    return this._correlationCounter ? this._correlationCounter : 0;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  // Got rid of the inconsequential ifs for old IE versions in 2024 (again?)\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code, to be overridden in subclass\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n    LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n    if (this._transportSession) {\n      this._transportSession._socket._sender._socket.destroy(new Error(errorMsg));\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\nconst clone = require('./lib/clone');\n\nmodule.exports = {\n  clone,\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const cloneObj = require('./clone'); // using the modified local clone version\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","/* Any copyright is dedicated to the Public Domain.\n * http://creativecommons.org/publicdomain/zero/1.0/ */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-labels */\n/* eslint-env browser */\nmodule.exports = function (scope) {\n  // feature detect for URL constructor\n  let hasWorkingUrl = false;\n  if (!scope.forceJURL) {\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      hasWorkingUrl = u.href === 'http://a/c%20d';\n    } catch (e) {\n      // no problem\n    }\n  }\n\n  if (hasWorkingUrl) {\n    return;\n  }\n\n  // Otherwise the keys get minified.\n  /* eslint-disable dot-notation */\n  const relative = Object.create(null);\n  relative['ftp'] = 21;\n  relative['file'] = 0;\n  relative['gopher'] = 70;\n  relative['http'] = 80;\n  relative['https'] = 443;\n  relative['ws'] = 80;\n  relative['wss'] = 443;\n  /* eslint-enable dot-notation */\n\n  const relativePathDotMapping = Object.create(null);\n  relativePathDotMapping['%2e'] = '.';\n  relativePathDotMapping['.%2e'] = '..';\n  relativePathDotMapping['%2e.'] = '..';\n  relativePathDotMapping['%2e%2e'] = '..';\n\n  function clear() {\n    this._scheme = '';\n    this._schemeData = '';\n    this._username = '';\n    this._password = null;\n    this._host = '';\n    this._port = '';\n    this._path = [];\n    this._query = '';\n    this._fragment = '';\n    this._isInvalid = false;\n    this._isRelative = false;\n  }\n\n  function isRelativeScheme(scheme) {\n    return relative[scheme] !== undefined;\n  }\n\n  function invalid() {\n    clear.call(this);\n    this._isInvalid = true;\n  }\n\n  function IDNAToASCII(h) {\n    if (h === '') {\n      invalid.call(this);\n    }\n    // TODO: more robust\n    return h.toLowerCase();\n  }\n\n  function percentEscape(c) {\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ? `\n       [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  function percentEscapeQuery(c) {\n    // TODO: This actually needs to encode c using encoding and then\n    // convert the bytes one-by-one.\n\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ` (do not escape '?')\n       [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  let EOF;\n  const ALPHA = /[a-zA-Z]/;\n  const ALPHANUMERIC = /[a-zA-Z0-9+\\-.]/;\n\n  function parse(input, stateOverride, base) {\n    const errors = [];\n    function err(message) {\n      errors.push(message);\n    }\n\n    let state = stateOverride || 'scheme start';\n    let cursor = 0;\n    let buffer = '';\n    let seenAt = false;\n    let seenBracket = false;\n\n    loop: while ((input[cursor - 1] !== EOF || cursor === 0) && !this._isInvalid) {\n      const c = input[cursor];\n      switch (state) {\n        case 'scheme start':\n          if (c && ALPHA.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n            state = 'scheme';\n          } else if (!stateOverride) {\n            buffer = '';\n            state = 'no scheme';\n            continue;\n          } else {\n            err('Invalid scheme.');\n            break loop;\n          }\n          break;\n\n        case 'scheme':\n          if (c && ALPHANUMERIC.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n          } else if (c === ':') {\n            this._scheme = buffer;\n            buffer = '';\n            if (stateOverride) {\n              break loop;\n            }\n            if (isRelativeScheme(this._scheme)) {\n              this._isRelative = true;\n            }\n            if (this._scheme === 'file') {\n              state = 'relative';\n            } else if (this._isRelative && base && base._scheme === this._scheme) {\n              state = 'relative or authority';\n            } else if (this._isRelative) {\n              state = 'authority first slash';\n            } else {\n              state = 'scheme data';\n            }\n          } else if (!stateOverride) {\n            buffer = '';\n            cursor = 0;\n            state = 'no scheme';\n            continue;\n          } else if (EOF === c) {\n            break loop;\n          } else {\n            err(`Code point not allowed in scheme: ${c}`);\n            break loop;\n          }\n          break;\n\n        case 'scheme data':\n          if (c === '?') {\n            this._query = '?';\n            state = 'query';\n          } else if (c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            // TODO: error handling\n            this._schemeData += percentEscape(c);\n          }\n          break;\n\n        case 'no scheme':\n          if (!base || !(isRelativeScheme(base._scheme))) {\n            err('Missing scheme.');\n            invalid.call(this);\n          } else {\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative or authority':\n          if (c === '/' && input[cursor + 1] === '/') {\n            state = 'authority ignore slashes';\n          } else {\n            err(`Expected /, got: ${c}`);\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative':\n          this._isRelative = true;\n          if (this._scheme !== 'file') { this._scheme = base._scheme; }\n          if (EOF === c) {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._username = base._username;\n            this._password = base._password;\n            break loop;\n          } else if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') { err('\\\\ is an invalid code point.'); }\n            state = 'relative slash';\n          } else if (c === '?') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = '?';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'query';\n          } else if (c === '#') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._fragment = '#';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'fragment';\n          } else {\n            const nextC = input[cursor + 1];\n            const nextNextC = input[cursor + 2];\n            if (this._scheme !== 'file' || !ALPHA.test(c) ||\n                (nextC !== ':' && nextC !== '|') ||\n                (\n                  EOF !== nextNextC && nextNextC !== '/' &&\n                  nextNextC !== '\\\\' && nextNextC !== '?' && nextNextC !== '#'\n                )\n              ) {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n              this._path = base._path.slice();\n              this._path.pop();\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'relative slash':\n          if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') {\n              err('\\\\ is an invalid code point.');\n            }\n            if (this._scheme === 'file') {\n              state = 'file host';\n            } else {\n              state = 'authority ignore slashes';\n            }\n          } else {\n            if (this._scheme !== 'file') {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'authority first slash':\n          if (c === '/') {\n            state = 'authority second slash';\n          } else {\n            err(`Expected '/', got: ${c}`);\n            state = 'authority ignore slashes';\n            continue;\n          }\n          break;\n\n        case 'authority second slash':\n          state = 'authority ignore slashes';\n          if (c !== '/') {\n            err(`Expected '/', got: ${c}`);\n            continue;\n          }\n          break;\n\n        case 'authority ignore slashes':\n          if (c !== '/' && c !== '\\\\') {\n            state = 'authority';\n            continue;\n          } else {\n            err(`Expected authority, got: ${c}`);\n          }\n          break;\n\n        case 'authority':\n          if (c === '@') {\n            if (seenAt) {\n              err('@ already seen.');\n              buffer += '%40';\n            }\n            seenAt = true;\n            for (let i = 0; i < buffer.length; i++) {\n              const cp = buffer[i];\n              if (cp === '\\t' || cp === '\\n' || cp === '\\r') {\n                err('Invalid whitespace in authority.');\n                continue;\n              }\n              // TODO: check URL code points\n              if (cp === ':' && this._password === null) {\n                this._password = '';\n                continue;\n              }\n              const tempC = percentEscape(cp);\n              if (this._password !== null) {\n                this._password += tempC;\n              } else {\n                this._username += tempC;\n              }\n            }\n            buffer = '';\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            cursor -= buffer.length;\n            buffer = '';\n            state = 'host';\n            continue;\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'file host':\n          if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            if (buffer.length === 2 && ALPHA.test(buffer[0]) &&\n                (buffer[1] === ':' || buffer[1] === '|')) {\n              state = 'relative path';\n            } else if (buffer.length === 0) {\n              state = 'relative path start';\n            } else {\n              this._host = IDNAToASCII.call(this, buffer);\n              buffer = '';\n              state = 'relative path start';\n            }\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err('Invalid whitespace in file host.');\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'host':\n        case 'hostname':\n          if (c === ':' && !seenBracket) {\n            // TODO: host parsing\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'port';\n            if (stateOverride === 'hostname') {\n              break loop;\n            }\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'relative path start';\n            if (stateOverride) {\n              break loop;\n            }\n            continue;\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            if (c === '[') {\n              seenBracket = true;\n            } else if (c === ']') {\n              seenBracket = false;\n            }\n            buffer += c;\n          } else {\n            err(`Invalid code point in host/hostname: ${c}`);\n          }\n          break;\n\n        case 'port':\n          if (/[0-9]/.test(c)) {\n            buffer += c;\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#'\n                     || stateOverride) {\n            if (buffer !== '') {\n              const temp = parseInt(buffer, 10);\n              if (temp !== relative[this._scheme]) {\n                this._port = `${temp}`;\n              }\n              buffer = '';\n            }\n            if (stateOverride) {\n              break loop;\n            }\n            state = 'relative path start';\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err(`Invalid code point in port: ${c}`);\n          } else {\n            invalid.call(this);\n          }\n          break;\n\n        case 'relative path start':\n          if (c === '\\\\') {\n            err(\"'\\\\' not allowed in path.\");\n          }\n          state = 'relative path';\n          if (c !== '/' && c !== '\\\\') {\n            continue;\n          }\n          break;\n\n        case 'relative path':\n          if (EOF === c || c === '/' || c === '\\\\' ||\n              (!stateOverride && (c === '?' || c === '#'))) {\n            if (c === '\\\\') {\n              err('\\\\ not allowed in relative path.');\n            }\n            const tmp = relativePathDotMapping[buffer.toLowerCase()];\n            if (tmp) {\n              buffer = tmp;\n            }\n            if (buffer === '..') {\n              this._path.pop();\n              if (c !== '/' && c !== '\\\\') {\n                this._path.push('');\n              }\n            } else if (buffer === '.' && c !== '/' && c !== '\\\\') {\n              this._path.push('');\n            } else if (buffer !== '.') {\n              if (this._scheme === 'file' && this._path.length === 0 && buffer.length === 2 &&\n                  ALPHA.test(buffer[0]) && buffer[1] === '|') {\n                buffer = `${buffer[0]}:`;\n              }\n              this._path.push(buffer);\n            }\n            buffer = '';\n            if (c === '?') {\n              this._query = '?';\n              state = 'query';\n            } else if (c === '#') {\n              this._fragment = '#';\n              state = 'fragment';\n            }\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            buffer += percentEscape(c);\n          }\n          break;\n\n        case 'query':\n          if (!stateOverride && c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._query += percentEscapeQuery(c);\n          }\n          break;\n\n        case 'fragment':\n          if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._fragment += c;\n          }\n          break;\n\n        default:\n      }\n\n      cursor++;\n    }\n  }\n\n\n  // Does not process domain names or IP addresses.\n  // Does not handle encoding for the query parameter.\n  /* eslint-disable no-param-reassign */\n  function PolyfillURL(url, base /* , encoding */) {\n    if (base !== undefined && !(base instanceof PolyfillURL)) {\n      base = new PolyfillURL(String(base));\n    }\n\n    url = String(url);\n    this._url = url;\n    clear.call(this);\n\n    const input = url.replace(/^[ \\t\\r\\n\\f]+|[ \\t\\r\\n\\f]+$/g, '');\n    // encoding = encoding || 'utf-8'\n\n    parse.call(this, input, null, base);\n  }\n\n  PolyfillURL.prototype = {\n    toString() {\n      return this.href;\n    },\n    get href() {\n      if (this._isInvalid) { return this._url; }\n\n      let authority = '';\n      if (this._username !== '' || this._password !== null) {\n        authority = `${this._username +\n            (this._password !== null ? `:${this._password}` : '')}@`;\n      }\n\n      return this.protocol +\n          (this._isRelative ? `//${authority}${this.host}` : '') +\n          this.pathname + this._query + this._fragment;\n    },\n    set href(href) {\n      clear.call(this);\n      parse.call(this, href);\n    },\n\n    get protocol() {\n      return `${this._scheme}:`;\n    },\n    set protocol(protocol) {\n      if (this._isInvalid) { return; }\n      parse.call(this, `${protocol}:`, 'scheme start');\n    },\n\n    get host() {\n      if (this._isInvalid) return '';\n      if (this._port) return `${this._host}:${this._port}`;\n      return this._host;\n    },\n    set host(host) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, host, 'host');\n    },\n\n    get hostname() {\n      return this._host;\n    },\n    set hostname(hostname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, hostname, 'hostname');\n    },\n\n    get port() {\n      return this._port;\n    },\n    set port(port) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, port, 'port');\n    },\n\n    get pathname() {\n      if (this._isInvalid) return '';\n      if (this._isRelative) return `/${this._path.join('/')}`;\n      return this._schemeData;\n    },\n    set pathname(pathname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._path = [];\n      parse.call(this, pathname, 'relative path start');\n    },\n\n    get search() {\n      return this._isInvalid || !this._query || this._query === '?' ?\n          '' : this._query;\n    },\n    set search(search) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._query = '?';\n      if (search[0] === '?') { search = search.slice(1); }\n      parse.call(this, search, 'query');\n    },\n\n    get hash() {\n      return this._isInvalid || !this._fragment || this._fragment === '#' ?\n          '' : this._fragment;\n    },\n    set hash(hash) {\n      if (this._isInvalid) { return; }\n      this._fragment = '#';\n      if (hash[0] === '#') { hash = hash.slice(1); }\n      parse.call(this, hash, 'fragment');\n    },\n\n    get origin() {\n      if (this._isInvalid || !this._scheme) {\n        return '';\n      }\n      // javascript: Gecko returns String(\"\"), WebKit/Blink String(\"null\")\n      // Gecko throws error for \"data://\"\n      // data: Gecko returns \"\", Blink returns \"data://\", WebKit returns \"null\"\n      // Gecko returns String(\"\") for file: mailto:\n      // WebKit/Blink returns String(\"SCHEME://\") for file: mailto:\n      switch (this._scheme) {\n        case 'data':\n        case 'file':\n        case 'javascript':\n        case 'mailto':\n          return 'null';\n        default:\n      }\n      const host = this.host;\n      if (!host) {\n        return '';\n      }\n      return `${this._scheme}://${host}`;\n    },\n  };\n\n  // Copy over the static methods\n  const OriginalURL = scope.URL;\n  if (OriginalURL) {\n    PolyfillURL.createObjectURL = function createObjectURL(...args) {\n      // IE extension allows a second optional options argument.\n      // http://msdn.microsoft.com/en-us/library/ie/hh772302(v=vs.85).aspx\n      return OriginalURL.createObjectURL(...args);\n    };\n    PolyfillURL.revokeObjectURL = function revokeObjectURL(url) {\n      OriginalURL.revokeObjectURL(url);\n    };\n  }\n\n  scope.URL = PolyfillURL;\n};\n","/**\n * Copyright (c) 2011-2016 Paul Vorbach and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining \n * a copy of this software and associated documentation files \n * (the “Software”), to deal in the Software without restriction, \n * including without limitation the rights to use, copy, modify, \n * merge, publish, distribute, sublicense, and/or sell copies of \n * the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included \n * in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n'use strict';\n\n/**\n * The is a local modified version of the clone npm module (https://www.npmjs.com/package/clone).\n * According to its description, it offers a foolproof deep cloning \n * of objects, arrays, numbers, strings, maps, sets, \n * promises, etc. in JavaScript.\n * \n * I refactored it to be compatible with Webpack.\n * Refator List:\n * - update the use of the 'var' keyword to 'let' and 'const' where appropriate.\n * - Made the variable names more clearer and intuitive (clean code)\n * - I used ES6 contants/definitions where possible.\n * \n * Original can be found Here:\n * - On Npm -> https://www.npmjs.com/package/clone\n * - On GitHub -> https://github.com/pvorb/node-clone\n * \n * Created by oodigie on 26/05/2023.\n */\nconst clone = (function() {\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nlet nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nlet nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nlet nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  const allParents = [];\n  const allChildren = [];\n\n  const useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    let child;\n    let proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      const index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      let keyChild, valueChild;\n      parent.forEach(function(value, key) {\n        keyChild = _clone(key, depth - 1);\n        valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      let entryChild;\n      parent.forEach(function(value) {\n        entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (let i in parent) {\n      let attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      const symbols = Object.getOwnPropertySymbols(parent);\n      for (let i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        let symbol = symbols[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      const allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (let i = 0; i < allPropertyNames.length; i++) {\n        let propertyName = allPropertyNames[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  let emptyCloneFunc = function () {};\n  emptyCloneFunc.prototype = parent;\n  return new emptyCloneFunc();\n};\n\n// private utility functions\n\nfunction __objToStr(obj) {\n  return Object.prototype.toString.call(obj);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(regExpOptions) {\n  let flags = '';\n  if (regExpOptions.global) flags += 'g';\n  if (regExpOptions.ignoreCase) flags += 'i';\n  if (regExpOptions.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n\n})();\n\nmodule.exports = clone;\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/**\n * Module exports.\n */\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n * @license MIT (© Joyent)\n */\n/* legacy: obj, showHidden, depth, colors*/\n\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isNull(arg) {\n  return arg === null;\n}\n\nfunction hasOwn(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwn(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  try {\n    if (ctx.showHidden && Object.getOwnPropertyNames) {\n      keys = Object.getOwnPropertyNames(value);\n    }\n  } catch (e) {\n    // ignore\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (Array.isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = { value: void 0 };\n  try {\n    // ie6 › navigator.toString\n    // throws Error: Object doesn't support this property or method\n    desc.value = value[key];\n  } catch (e) {\n    // ignore\n  }\n  try {\n    // ie10 › Object.getOwnPropertyDescriptor(window.location, 'hash')\n    // throws TypeError: Object doesn't support this action\n    if (Object.getOwnPropertyDescriptor) {\n      desc = Object.getOwnPropertyDescriptor(value, key) || desc;\n    }\n  } catch (e) {\n    // ignore\n  }\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwn(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","\"use strict\";\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar node_worker_1 = {};\nnode_worker_1[\"default\"] = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexports.FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return (0, node_worker_1.default)(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            if (split) {\n                this.b.set(chunk.subarray(0, split), this.s.z);\n                this.s.z = this.b.length;\n                this.p(this.b, false);\n            }\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    return Deflate;\n}());\nexports.Deflate = Deflate;\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexports.AsyncDeflate = AsyncDeflate;\nfunction deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\nexports.deflate = deflate;\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nfunction deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\nexports.deflateSync = deflateSync;\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexports.Inflate = Inflate;\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexports.AsyncInflate = AsyncInflate;\nfunction inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\nexports.inflate = inflate;\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.inflateSync = inflateSync;\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexports.Gzip = Gzip;\nexports.Compress = Gzip;\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexports.AsyncGzip = AsyncGzip;\nexports.AsyncCompress = AsyncGzip;\nfunction gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\nexports.gzip = gzip;\nexports.compress = gzip;\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nfunction gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\nexports.gzipSync = gzipSync;\nexports.compressSync = gzipSync;\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            if (this.p.length)\n                this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexports.Gunzip = Gunzip;\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this_1 = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, function (offset) { return _this_1.onmember && _this_1.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexports.AsyncGunzip = AsyncGunzip;\nfunction gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\nexports.gunzip = gunzip;\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\nexports.gunzipSync = gunzipSync;\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexports.Zlib = Zlib;\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexports.AsyncZlib = AsyncZlib;\nfunction zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\nexports.zlib = zlib;\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nfunction zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\nexports.zlibSync = zlibSync;\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexports.Unzlib = Unzlib;\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexports.AsyncUnzlib = AsyncUnzlib;\nfunction unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\nexports.unzlib = unzlib;\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.unzlibSync = unzlibSync;\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.o = StrmOpt.call(this, opts, cb) || {};\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_2 = this;\n                // enables reuse of this method by AsyncDecompress\n                var cb = function () { _this_2.ondata.apply(_this_2, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o, cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o, cb)\n                        : new this.Z(this.o, cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexports.Decompress = Decompress;\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        Decompress.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexports.AsyncDecompress = AsyncDecompress;\nfunction decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\nexports.decompress = decompress;\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\nexports.decompressSync = decompressSync;\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexports.DecodeUTF8 = DecodeUTF8;\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexports.EncodeUTF8 = EncodeUTF8;\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nfunction strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\nexports.strToU8 = strToU8;\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nfunction strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\nexports.strFromU8 = strFromU8;\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexports.ZipPassThrough = ZipPassThrough;\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexports.ZipDeflate = ZipDeflate;\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexports.AsyncZipDeflate = AsyncZipDeflate;\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this_1.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this_1.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this_1.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this_1.ondata(err, dat, final);\n                    _this_1.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexports.Zip = Zip;\nfunction zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\nexports.zip = zip;\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nfunction zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\nexports.zipSync = zipSync;\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexports.UnzipPassThrough = UnzipPassThrough;\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexports.UnzipInflate = UnzipInflate;\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexports.AsyncUnzipInflate = AsyncUnzipInflate;\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_3 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexports.Unzip = Unzip;\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nfunction unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    if (sc < 320000) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\nexports.unzip = unzip;\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nfunction unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\nexports.unzipSync = unzipSync;\n","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./index.js\");\n"],"names":["root","factory","exports","module","define","amd","this","Base64","Bits","Convert","Hex","Long","KEY_STR","ENC_LUT","DecodeError","Error","LegacyEncoder","base64_encode","input","let","output","i","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","length","base64_decode","String","fromCharCode","isNode","window","hasBuffer","Buffer","hasBlob","Blob","BufferEncoder","str","from","toString","WindowEncoder","b","a","encode","decode","get","val","shift","numBits","set","dataIn","curMask","shiftedVal","data","ErrorSubcode","OperationError","BufferImpl","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","UNSIGNED_LSHIFT_24","ARRAY_BUFFER_CONVERT_CHUNK","uint8ArrayToString","format","undefined","dataLength","byteLength","uint8DataArray","Uint8Array","result","toLowerCase","padStart","stringToUint8Array","arrayBuf","ArrayBuffer","uint8Array","hexStringToUint8Array","arrayBufferToString","ab","len","u8","apply","k","r","subarray","stringToArrayBuffer","buffer","int8ToStr","int8","int16ToStr","int16","int24ToStr","int24","int32ToStr","int32","int64ToStr","int64","high","low","byteArrayToStr","byteArray","slice","strToByteArray","strToHexArray","toHex","c","Array","prototype","map","call","split","strToInt8","strToInt16","strToInt24","strToInt32","strToUInt32","strToUInt64","fromBits","substr","ucs2ToUtf8","ucs2","unescape","encodeURIComponent","utf8ToUcs2","utf8","decodeURIComponent","escape","anythingToBuffer","value","isBuffer","byteOffset","PARAMETER_OUT_OF_RANGE","numToHex","n","s","formatHexString","obj","isArray","join","_","Debug","Destination","ESKit","Factory","FSM","Log","Message","MessageTracing","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","FactoryLib","SolclientFactory","SolclientFactoryProfiles","SolclientFactoryProperties","DestinationType","Topic","NotImplementedError","RequestError","RequestEventCode","makeIterator","ConsoleLogImpl","LogImpl","LogLevel","MessageCacheStatus","MessageDeliveryModeType","MessageDumpFlag","MessageOutcome","MessageType","MessageUserCosType","ReplicationGroupMessageId","MessageConsumer","MessageConsumerAcknowledgeMode","MessageConsumerEventName","MessageConsumerProperties","QueueBrowser","QueueBrowserEventName","QueueBrowserProperties","ReplayStartLocation","ReplayStartLocationBeginning","MessagePublisherAcknowledgeMode","MessagePublisherProperties","Baggage","TraceContext","TraceContextSetter","AbstractQueueDescriptor","QueueAccessType","QueueDescriptor","QueueDiscardBehavior","QueuePermissions","QueueProperties","QueueType","EndpointNameComplaint","SDTField","SDTFieldType","SDTMapContainer","SDTStreamContainer","SDTUnsupportedValueError","SDTValueErrorSubcode","AuthenticationScheme","CapabilityType","MessageRxCBInfo","MutableSessionProperty","SessionEvent","SessionEventCBInfo","SessionEventCode","SessionProperties","SessionState","SslDowngrade","CacheCBInfo","CacheLiveDataAction","CacheRequestResult","CacheReturnCode","CacheReturnSubcode","CacheSession","CacheSessionProperties","StatType","TransportError","TransportProtocol","Version","_internal","solace","Object","assign","PRINTABLE_LUT","tmp","SPACER","UNPRINTABLE","formatDumpBytes","showDecode","leftPadding","StringBuffer","StringUtils","isEmpty","padLeft","padRight","ascii","line","lineBytes","asciiOffset","dataLen","ccode","append","clear","parseSMFStream","Decode","decodeCompoundMessage","Codec","LOG_WARN","LOG_ERROR","pos","incomingMsg","smf","smfHeader","smf_protocol","messageLength","DestinationFromNetwork","DestinationUtil","Parameter","Queue","createTopicDestination","createFactory","isString","topicName","createFromName","createTopic","createDurableQueueDestination","queueName","createFromLocalName","QUEUE_PREFIX","QUEUE_PREFIX_LEN","TEMPORARY_QUEUE_PREFIX","createDestinationFromName","networkTopicName","networkTopicBytes","spec","name","bytes","encodeBytes","startsWith","offset","type","QUEUE","TEMPORARY_QUEUE","createDestinationFromBytes","decodeBytes","Enum","TOPIC","new","_setCanonical","SolclientFactoryLib","SubscriptionInfo","UUID","ProfileBinding","toSafeChars","stripNullTerminate","DESTINATION_PREFIX_FROM_TYPE","createTemporaryName","vrid","id","generateUUID","describe","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","exceptionCreator","bind","error","nameLength","bytesLength","isWildcarded","topicUtf8Encode","prefix","networkName","validateAndEncode","constError","subscriptionInfo","keys","some","prefixType","errorConst","subInfo","subInfoConst","parseFromName","constructor","_name","_type","_bytes","_offset","isValidated","_isValidated","_isWildcarded","_subscriptionInfo","getName","getType","getBytes","getOffset","validate","_error","getSubscriptionInfo","util_inspect","equals","other","valueOf","DestinationUtilLib","assert","super","encoding","subscriptionParseNoExport","NOEXPORT_PREFIX","NOEXPORT_PREFIX_LEN","index","isNoExport","subscriptionParseShare","SHARE_PREFIX","SHARE_PREFIX_LEN","LEVEL_DELIMETER","LEVEL_DELIMETER_LEN","groupIndex","shareGroup","isShare","indexOf","substring","dispatchTopicIndex","subscriptionStringParse","layers","parseLayers","constOffset","constResult","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","parse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","apiEnv","envObject","g","BUILD_ENV","TEST","target","ErrorResponseSubcodeMapper","SolaceError","makeMap","SC","ROOT_MAPPING","CLIENT_NAME_INVALID","MESSAGE_TOO_LARGE","INACTIVITY_TIMEOUT","SUBSCRIPTION_TOO_MANY","NOLOCAL_DISCARD","OUT_OF_RESOURCES","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_ATTRIBUTES_CONFLICT","SUBSCRIPTION_NOT_FOUND","SUBSCRIPTION_INVALID","UNKNOWN_TRANSPORT_SESSION_ID","XML_PARSE_ERROR","LOGIN_FAILURE","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","CLIENT_NAME_ALREADY_IN_USE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","MESSAGE_VPN_NOT_ALLOWED","PUBLISH_ACL_DENIED","REPLICATION_IS_STANDBY","SELECTOR_DOES_NOT_MATCH","SUBSCRIPTION_ACL_DENIED","SUBSCRIPTION_DOES_NOT_MATCH","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","LOW_PRIORITY_MSG_CONGESTION","MESSAGE_VPN_UNAVAILABLE","GM_UNAVAILABLE","SPOOL_OVER_QUOTA","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","MAX_MESSAGE_USAGE_EXCEEDED","GM_NOT_READY","AD_MAPPING","ALREADY_BOUND","ENDPOINT_ALREADY_EXISTS","ENDPOINT_PROPERTY_MISMATCH","INVALID_DTE_NAME","INVALID_SELECTOR","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY","QUEUE_NOT_FOUND","QUOTA_OUT_OF_RANGE","UNKNOWN_FLOW_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","INVALID_QUEUE_NAME","INVALID_TE_NAME","MESSAGE_SIZE_OUT_OF_RANGE","UNSUPPORTED_PERMISSIONS","PERMISSION_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_TEMPORARY_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","MISMATCHED_ENDPOINT_ERROR_ID","REPLAY_START_MESSAGE_NOT_AVAILABLE","PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED","PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED","TOPIC_ENDPOINT_SHUTDOWN","MAX_CLIENTS_FOR_TE","MAX_CLIENTS_FOR_QUEUE","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","NO_SUBSCRIPTION_MATCH","QUEUE_SHUTDOWN","UNKNOWN_TOPIC_ENDPOINT_NAME","UNKNOWN_QUEUE_NAME","REPLAY_DISABLED","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_STARTED","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_START_TIME_NOT_AVAILABLE","SYNC_REPLICATION_INELIGIBLE","MAX_ENDPOINTS_EXCEEDED","COPY_FROM_QUEUE_TEMPLATE_MISSING","COPY_FROM_TE_TEMPLATE_MISSING","ASSURED_DELIVERY_NOT_READY","getSubcodeMappingInner","respErrorCode","respStr","codeMap","searchKey","foundKey","find","mapKey","getSubcodeMapping","UNKNOWN_ERROR","getErrorSubcode","getADErrorSubcode","NO_ERROR","SESSION_NOT_CONNECTED","INVALID_SESSION_OPERATION","INVALID_OPERATION","TIMEOUT","PARAMETER_CONFLICT","PARAMETER_INVALID_TYPE","INTERNAL_ERROR","INSUFFICIENT_SPACE","PROTOCOL_ERROR","COMMUNICATION_ERROR","KEEP_ALIVE_FAILURE","TOPIC_MISSING","SUBSCRIPTION_ERROR_OTHER","NO_LOCAL_NOT_SUPPORTED","DATA_ERROR_OTHER","CREATE_XHR_FAILED","CONNECTION_ERROR","DATA_DECODE_ERROR","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","UNEXPECTED_UNBIND","MESSAGE_DELIVERY_MODE_MISMATCH","MESSAGE_ALREADY_ACKNOWLEDGED","CALLBACK_ERROR","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","UNRESOLVED_HOSTS","REPLAY_NOT_SUPPORTED","COMPRESSED_TLS_NOT_SUPPORTED","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","MESSAGE_ID_NOT_COMPARABLE","message","subcode","reason","SUBCODE_FROM_EC","REQUEST_ABORTED","REQUEST_TIMEOUT","eventCode","correlationKey","_eventCode","_correlationKey","_requestEventCode","superObj","requestEventCode","infoStr","captureStackTrace","stack","ArrayOperations","BidiMap","Iterator","Lazy","Mixin","Resolver","SetOperations","mixin","resolve","defaultComparator","astr","bstr","insertOrdered","array","element","comparator","inplaceInsertOrdered","min","max","splice","pairs","forward","Map","reverse","forEach","setValues","p","key","enumName","instance","matches","filter","enumValues","Set","values","defineProperties","_canonical","enumerable","writable","configurable","final","descriptor","getOwnPropertyDescriptor","defineProperty","enumValue","noneValue","unknownValue","nameOf","strings","arr","start","end","_arr","_index","_end","deref","incr","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","options","lazyProperty","evalFn","lazyProperties","lazyValue","keyValuePairs","add","targetProto","addProto","getOwnPropertyNames","traversePath","commonSource","keySource","pathArr","reduce","source","compoundKey","trim","rawPath","path","concat","isSuperset","subset","every","elem","has","inplaceUnion","setA","setB","union","inplaceIntersection","delete","intersection","inplaceDifference","difference","EventEmitter","Timer","NodeEventEmitter","ArrayUtils","flatten","includes","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","buildFilter","emits","emitSet","el","emitArray","DISABLED_ACTIONS","ignore","fail","direct","unsafe","formatEventName","bareEmit","emit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","_emits","_defaultEmitDirect","args","emitDirect","_directEventName","on","eventName","listener","_verifyListenerEvent","ret","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","_onFirstDirectListener","firstDirect","onListener","event","throwInternal","err","emitBase","_internalError","ex","formatErrorEvent","info","formattedName","innerEx","disableEmitter","cancel","interval","onInterval","timerRef","setInterval","clearInterval","timeout","onExpire","setTimeout","clearTimeout","FactoryProfile","binding","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","Version7Profile","legacyInstance","Version10Profile","v10Instance","Version105Profile","forwardInstance","_legacy","_v10","_forward","_default","version7","version10","version10_5","APIProperties","Check","getDefaultLogLevel","INFO","logLevel","logger","_profile","profile","number","_logLevel","_logger","factoryState","initializeCount","initializers","addInitializer","func","push","init","factoryProps","props","isInstanceOf","initializer","reset","_getInitializeCount","Flow","FlowOperation","PrivateFlowEventName","CONNECT","DISCONNECT","START","STOP","DISPOSE","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","LogFormatter","Stats","ALWAYS_OPS","flowProperties","sessionInterfaceFactory","emitterOptions","emitterOptionsFull","sessionInterface","self","sessionIdHex","flowIdDec","log","wrap","_disposing","_disposed","_userDisconnected","_properties","_sessionInterface","_stats","_privateEventEmitter","_emit","_on","_once","_removeListener","clearStats","_operationCheck","resetStats","connect","userDisconnected","dispose","terminate","getDisposedEvent","_fsm","_midDispatch","terminateWithRunningFSM","terminateFsm","disconnect","_disconnectSession","getProperties","clone","getStat","statType","handleUncorrelatedControlMessage","incStat","processFSMEvent","processEvent","disposed","flowId","_session","operation","v","_isDisconnected","BIND_WAITING","FsmEvent","State","StateMachine","StateLib","FsmObject","EntryPoint","entryPointName","innerState","impl","outerState","state","parentContext","getParent","initial","transitionTo","getDestState","ExitPoint","exitPointName","extraStringInfo","getExtraStringInfo","StateContext","logPadding","getStateMachine","ancestorList","initialReaction","action","ReactionResult","caller","destState","getFinalState","getAncestorList","onInitial","external","processReactionResult","e","curContext","destStateIter","lowestCommonAncestor","onExit","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","eventQueue","finalState","handleUncaughtException","ev","exc","process","processingEvents","evt","_onEventCompletion","getCurrentState","currentState","handleEvent","curState","setPostEventAction","postEventAction","getActiveState","activeStates","isStateActive","unhandledEventReaction","handleUnhandledEvent","uncaughtExceptionReaction","extensions","reactions","entryPoints","exitPoints","extension","repeat","reaction","entryPoint","exitPoint","getEntryPointDestState","getExitPointDestState","entry","appEntryFunc","exit","appExitFunc","externalTransitionTo","transitionToEntryPoint","transitionToExitPoint","eventUnhandled","internalTransition","GlobalBinding","isEnumMember","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","buildLogForwarder","trace","TRACE","debug","DEBUG","warn","WARN","ERROR","fatal","addGlobalFuncs","toUpperCase","formatter","_formatter","genericFunction","targetSelf","newLevel","Binding","STUB","generateLogHeader","levelStr","date","Date","levelStrPadding","YY","getFullYear","MM","getMonth","DD","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","ms","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","Function","level","LogBinding","FATAL","ConsumerFlows","ConsumerFSMEvent","ConsumerFSMEventNames","MessageConsumerEvent","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","settlementOutcome","exists","ACCEPTED","ApplicationAckRingBuffer","size","_size","_insertIndex","_buffer","fill","ack","insert","beforeEvictCallback","insertIndex","inserting","evictingIndex","evicting","front","firstIndex","rawIndex","lastIndex","readIndex","callback","updateAckState","updateIndex","existing","_allFlows","_reconnectingFlows","_flowsById","flow","flowUp","flowDisposed","flowById","flowReconnecting","flowReconnected","flowDown","UP","RECONNECTED","DISPOSED","RECONNECTING","DOWN","DOWN_ERROR","getFlowById","disposeAll","SESSION_UP","SESSION_UP_NO_AD","SESSION_DOWN","SESSION_DISCONNECT","FLOW_FAILED","FLOW_UP","FLOW_ACTIVE_IND","FLOW_CLOSE","FLOW_OPEN","FLOW_UNBOUND","ACK","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","CAN_SEND","TRANSPORT_ERROR","VIRTUALROUTER_NAME_CHANGED","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","details","SMFLib","ConsumerStateNames","MessageDispatcher","RgmidFactory","TransportAcks","TransportAckResult","RING_BUFFER_SIZE","ZERO_APP_ACK","UZERO","ConsumerFSM","consumer","properties","fsm","LOG_INFO","autoAck","acknowledgeMode","AUTO","_consumer","_acknowledgeTimeoutInMsecs","acknowledgeTimeoutInMsecs","_acknowledgeThreshold","acknowledgeThreshold","_localPreferredWindowSize","windowSize","_localMaxWindowSize","_hasAutoAckSupport","_messageDispatch","emitter","_resetRemoteConnectionState","_resetLocalConnectionState","_replayStartLocation","replayStartLocation","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","ACTIVE","INACTIVE","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","addEventToEmit","activeIndicationEnabled","requestStartDispatch","requestStopDispatch","requestStopDispatchFSM","_addEventToEmit","_requestStartDispatch","_requestStopDispatch","emitBindFailed","CONNECT_FAILED_ERROR","emitRebindFailed","verifyEndpointSubscription","destination","isCapable","SHARED_SUBSCRIPTIONS","verifyNackSettlementOutcomesSupport","requiredSettlementOutcomes","settlementOutcomes","isNackRequired","FAILED","REJECTED","AD_APP_ACK_FAILED","outcomeNotSupportedError","checkCapabilitiesChoicePoint","MESSAGE_REPLAY","topicEndpointSubscription","Unbound","createIfMissing","queueDescriptor","durable","CreateSent","BindSent","checkCapabilitiesChoicePointOnRebind","externalTransition","Reconnecting","RBindSent","handleAccidentalBind","msg","correlationTag","getCorrelationTag","AdProtocolMessage","getCloseMessageConsumer","sendControl","enqueueRequest","connectTimeoutInMsecs","transitionToUnbound","_dispose","context","UNBOUND","emitDisabledEvent","GM_DISABLED","AwaitSessionUp","GUARANTEED_MESSAGE_CONSUME","AwaitFlowOpen","_connectAttempts","connectAttempts","UNBOUND_AWAIT_SESSION_UP","emitBindWaiting","UNBOUND_AWAIT_FLOWOPEN","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","queueProperties","noLocal","lastAcked","lastReceived","browser","endpointErrorId","partitionGroupId","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","accessTypeOrDefault","x","EXCLUSIVE","partitionGroupIdValue","getPartitionGroupId","_clearPartitionGroupId","attrs","lastMsgIdAcked","getLastMsgIdAcked","getFlowId","accessType","getAccessType","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","respectsTTL","getRespectsTTL","activeFlow","getActiveFlow","wantFlowChangeNotify","getWantFlowChangeNotify","discardBehavior","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getEndpointErrorId","spoolerUniqueId","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","queueDiscardBehavior","permissions","BR_REPLAY_ERRORID","consumerProperties","quotaMB","maxMessageSize","maxMessageRedelivery","NONE","_active","_remoteWindowSize","eq","msgType","SMFAdProtocolMessageType","BIND","PROTOTOCOL_ERROR","header","responseCode","pm_respcode","RX_DISCARD_SMF_UNKNOWN_ELEMENT","description","pm_respstr","errorSubcode","respEvent","BIND_SENT","newTimeout","UnbindSent","FlowUp","reconnectAttempts","RAwaitSessionUp","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_BIND_SENT","RAwaitTimer","RECONNECTING_AWAIT_TIMER","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","reconnectIntervalInMsecs","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","FLOW_UP_XFER","_sendAcks","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","sendUnbindRequest","_endpointClear","handleUnbindTimeout","response","handleUnbindResponse","getCurrentStateName","UNBIND","CREATE_SENT","sendCreateRequest","getCreate","handleCreateTimeout","handleCreateResponse","CREATE","acceptMessage","messageID","getGuaranteedMessageId","idstr","_fsmDispatch","RX_DISCARD_NO_MATCHING_CONSUMER","setDeliveryCount","messageSuid","_getSpoolerUniqueId","INVALID_SUID","_setSpoolerUniqueId","consumerSuidStr","msgSuidStr","ackResult","tryReceive","getGuaranteedPreviousMessageId","transportAckRequired","acksPending","maxPendingAcks","OK","DUPLICATE","RX_DISCARD_DUPLICATE","_applicationAcks","_oldUnacked","dupAckRanges","_sendAck","_setTransportAckTimer","OUT_OF_ORDER","RX_DISCARD_OUT_OF_ORDER","applicationAckRequired","applicationAck","messageId","isAutoAcked","applicationSettle","messageOutcome","RX_SETTLE_FAILED","RX_SETTLE_REJECTED","RX_SETTLE_ACCEPTED","RX_ACKED","oldAckRanges","getDestination","_destination","isDisconnected","UNBOUND_AWAITING_FLOWOPEN","requestStartDispatchUser","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_flowId","requestStopDispatchUser","stop","_clearTransportAckTimer","_transportAckTimer","_unacked","createDestinationFromDescriptor","createTemporaryDestination","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","allMessageOutcomes","currentRangeLength","rangeOutcome","totalRangeLen","MAX_CLIENT_ACK_RANGES","bareRanges","hasAnyBareRanges","range","forceTransportAck","failedBareRanges","rejectedBareRanges","setAcked","ackRange","Math","Number","POSITIVE_INFINITY","maxWindowSize","UNBOUND_AWAIT_ANY","CLIENT","MESSAGE","SUBSCRIPTION_OK","SUBSCRIPTION_ERROR","messageConsumerEventName","_messageConsumerEventName","_infoStr","_responseCode","_errorSubcode","_reason","QueueDescriptorValidator","QueuePropertiesValidator","APIPropertiesValidators","validateInstance","valBoolean","valInstance","valIsMember","valNumber","valRange","valTopicStringOrEmpty","valTopicEndpointSubscription","typeDesc","TOPIC_ENDPOINT","isDurable","MessageConsumerPropertiesValidator","rawProperties","hasOwnProperty","something","MAX_VALUE","QueueLib","DEFAULTS","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","_browser","_queueDescriptor","_queueProperties","_bindTimeoutInMsecs","_topicEndpointSubscription","_acknowledgeMode","_requiredSettlementOutcomes","_transportAcknowledgeTimeoutInMsecs","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","newValue","_noLocal","_windowSize","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","localCounter","getConsumerLocalName","applyProperties","superFormatter","_makeFSM","_onFlowActive","_onFlowDisconnected","_onFlowUp","getCapability","handleDataMessage","setMessageConsumer","FLOWCHANGEUPDATE","active","onVRNChanged","_accessType","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","_disposeFSM","addSubscription","topic","requestTimeout","success","subCode","respCode","respText","updateQueueSubscription","removeSubscription","queue","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","isAcknowledged","_autoAcknowledge","messageConsumer","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","_onConsumerGMDisabled","removeMessageFromQueue","_guaranteedMsgId","_acked","base","fromNumber","fromValue","_acksPending","ZERO","prevMessageID","_lastReceived","lt","gte","_lastAcked","MessagePublisher","MessagePublisherEventName","MessagePublisherPropertiesValidator","PublisherFSMEvent","PublisherFSMEventNames","_lastSent","_next","longToString","MessageIds","setLastSent","lastSent","next","PER_MESSAGE","WINDOWED","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","GUARANTEED_MESSAGING_DOWN","REJECTED_MESSAGE","DISCONNECT_FAILED_ERROR","TRANSPORT_FULL","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","webSocket","getDefaults","enabled","connectRetryCount","_enabled","defined","_connectRetryCount","_connectTimeoutInMsecs","PublisherFSM","_bindWaiting","_onBindWaiting","_onBindFailed","_onDown","_onUp","publisher","_flowName","_publisherId","handleAck","handleNack","ctrlMessage","nack","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","prepareAdMessageAndSend","dataMsg","isBindWaiting","publisherId","RESEND_COMPLETE","smfmessage","getEventText","_eventText","SolclientSession","PublisherStateNames","TransportReturnCode","ConnectReason","INIT","RESUME","FAILOVER","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","adpMsg","smfRespHeader","OPENPUBFLOW","returnCode","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","getPublisherId","_messageIds","_unackedList","_connectReason","messages","count","oldId","_renumber","setFlowId","setPublisherId","payloadSizeLimit","MAX_GUARANTEED_MSG_SIZE","getValue","_memoized_payload","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","rxMsgObj","PublisherCloseFlowSent","PublisherUp","pEvent","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","TX_WINDOW_CLOSED","unackedList","_payload_is_memoized","_memoized_csumm","dupMsg","payloadSize","Encode","adaptMessageToSmf_payloadMemoize","_cloneNumbers","msgId","sendToTransport","NO_SPACE","setRedelivered","_startAckTimer","pop","TX_ACKS_RXED","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","m","sendData","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","TX_ACK_TIMEOUT","current","setGuaranteedPreviousMessageId","setGuaranteedMessageId","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","MessageTracingSupport","isStringOrNothing","getBaggage","_baggage","setBaggage","_setBaggage","isNumber","isBoolean","_traceId","_spanId","_isSampled","_traceState","_version","_clonedContextSetter","_setSpanId","_setTraceId","_setSampled","_setTraceState","_setVersion","setVersion","setTraceId","setSpanId","setSampled","setTraceState","traceContextValue","traceContextBuffer","traceContextBytes","bytesRead","traceContextSetter","firstByte","byte1DataView","DataView","byte1","getUint8","version","isSampled","traceId16Bytes","traceId","TRACE_ID_BYTES_LENGTH","spanId8Bytes","spanId","SPAN_ID_BYTES_LENGTH","traceStateLengthBytes","traceStateLengthDataView","traceStateLength","getUint16","traceStateBytes","traceState","toClone","newContextSetter","getSpanId","getTraceId","getIsSampled","getTraceState","getVersion","getTruncatedTraceState","_standardTraceStateTruncation","MAX_TRACE_STATE_LENGTH","getEncodedTraceContext","contentBuffer","offsetPos","contentBufferDataView","setUint8","traceId16byte","spanId8byte","setUint16","truncatedTraceState","Uint16Array","maxTraceStateLength","ignoredMembers","traceStateBuilderArray","traceStateBuilderArrayLength","listMembers","listMember","currentMemberLength","newExpectedLength","currentMember","getTraceContextSetter","_traceContextSetter","getTransportContext","_transportContext","_setTransportContext","contextSetter","getCreationContext","_creationContext","_setCreationContext","MessageDumpStandardProvider","MessageDumpUtil","createMessage","createReplicationGroupMessageId","fromString","LIVE","CACHED","SUSPECT","DIRECT","PERSISTENT","NON_PERSISTENT","MSGDUMP_BRIEF","MSGDUMP_FULL","DebugLib","MessageDumpUtilLib","fpDestination","dest","fpSenderId","getSenderId","fpAppmsgType","getApplicationMessageType","fpAppMsgId","getApplicationMessageId","fpSequenceNumber","sequenceNum","getSequenceNumber","fpTopicSequenceNumber","topicSeqNo","getTopicSequenceNumber","isLong","fpCorrelationId","getCorrelationId","fpHttpContentType","getHttpContentType","fpHttpContentEncoding","getHttpContentEncoding","fpSendTimestamp","timestamp","getSenderTimestamp","mdu","formatDate","fpRcvTimestamp","getReceiverTimestamp","fpClassOfService","cos","getUserCos","fpDeliveryMode","mode","getDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","getReplicationGroupMessageId","fpTimeToLive","timeToLive","getTimeToLive","d","getTime","fpExpiration","getGMExpiration","fpMessageDMQEligible","isDMQEligible","fpMessageRedelivered","isRedelivered","fpMessageDeliveryCount","getDeliveryCount","fpDiscardIndication","isDiscardIndication","fpAckImmediately","isAcknowledgeImmediately","fpElidingEligible","isElidingEligible","fpReplyMessage","isReplyMessage","fpReplyTo","replyTo","getReplyTo","fpDeliverToOne","isDeliverToOne","fpCacheMessage","getCacheStatus","fpCacheRequestId","cacheRequestId","getCacheRequestId","fpUserPropertyMap","flags","propMap","getUserPropertyMap","getKeys","detailValue","printMap","fpCorrelationTag","strValue","getCorrelationKey","fpUserData","notEmpty","getUserData","fpXmlMetadata","xmlMetadata","getXmlMetadata","fpTracingCreationContext","isPresent","fpTracingTransportContext","fpTracingBaggage","fpSdtStream","sdtFieldValue","getSdtContainer","STREAM","countItems","printStream","fpSdtMap","MAP","fpBinaryAttachment","_binaryAttachment","att","fpXmlContent","xml","getXmlContent","MessageDumpStandardProviderLib","MessageDumpState","providers","getOutOfRangeValue","rawData","sdtField","getSubcode","VALUE_OUTSIDE_SUPPORTED_RANGE","getSourceData","sdtMap","indent","nothing","lines","strIndent","sort","getField","BYTEARRAY","sdtStream","rewind","hasNext","getNext","DESTINATION","timeStamp","dump","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","dumpProviders","provider","BINARY","TEXT","COS1","COS2","COS3","SDTCodec","isInstanceOfOrNothing","isNumberOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","_spoolerUniqueId","_priority","_deliveryCount","clearMessage","fields","f","clearExtendedVarLenParameters","_messageType","setApplicationMessageId","_applicationMessageId","setApplicationMessageType","_applicationMessageType","getBinaryAttachment","setBinaryAttachment","_setBinaryAttachment","_cacheRequestId","_setCacheRequestID","cacheRequestID","_correlationId","setCorrelationId","setCorrelationKey","_deliverToOne","setDeliverToOne","_setDeliverToOne","setDeliveryMode","_setDeliveryMode","setDestination","_setDestination","_discardIndication","setDiscardIndication","_setDiscardIndication","_elidingEligible","setElidingEligible","_setElidingEligible","_httpContentEncoding","setHttpContentEncoding","_httpContentType","setHttpContentType","getPublisherMessageId","_publisherMsgId","setPublisherMessageId","_timeToLive","setTimeToLive","MAX_MESSAGE_TTL_MS","_expiration","setGMExpiration","_dmqEligible","setDMQEligible","_setDMQEligible","_guaranteedPrevMsgId","getMessageConsumer","_setSpoolerMessageId","_spoolerMessageId","smid","suid","msgid","_topicSequenceNumber","setTopicSequenceNumber","deliveryCount","settle","messageSettlementOutcome","canAck","hasAutoAckSupport","doesConsumerSupportOutcome","_validateBeforeAcknowledge","acknowledge","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","_setCacheStatus","cacheStatus","_replyMessage","_redelivered","setAsReplyMessage","_receiverTimestamp","_replyTo","setReplyTo","_senderId","setSenderId","_senderTimestamp","setSenderTimestamp","_sequenceNumberError","_sequenceNumber","setSequenceNumber","_autoSequenceNumber","getPriority","setUserCos","_setUserCos","setPriority","_setPriority","_userData","setUserData","_setUserData","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","_setXmlContentInternal","setXmlMetadata","_setXmlMetadata","_xmlMetadata","_binaryMetaChunk","meta","_smfHeader","_autoSenderTimestamp","_userPropertyMap","setUserPropertyMap","setSdtContainer","container","structuredContainer","_structuredContainer","sdtType","STRING","binaryAttachment","binaryAttachmentLength","parseSingleElement","_getCompressedBinaryAttachment","_compressedBinaryAttachment","_setCompressedBinaryAttachment","_getPayloadCompressed","_payloadCompressed","_setPayloadCompressed","setTransportContext","validFlags","clearExtendedVarLenParams","SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY","ReplayStartType","RMID_VERSION_1_PREFIX","RMID_LEN","validRmidHexRegex","isValue","effectiveMessageId","_replayStartValue","RGMID","_suid","_messageId","compare","otherReplicationGroupMessageId","oId","gt","idBuffer","toBytesBE","hexString","sep","rgmidStr","rmidBufs","rmidHex","test","rmidBuffer","buflen","readUInt32BE","explainInvalidEndpointName","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","maybeAdaptFromDestination","targetType","queueSpec","_durable","nameChecks","EMPTY_STRING","LT","GT","ASTERISK","QUESTION_MARK","AMPERSAND","SEMICOLON","LEADING_SLASH","TRAILING_SLASH","DOUBLE_SLASH","TOO_LONG","NO_ISSUE","isTE","triplet","match","NONEXCLUSIVE","valTopicString","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","DELETE","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","ReplayStartLocationDate","createReplayStartLocationBeginning","createReplayStartLocationDate","dateTime","BEGINNING","DATE","SDTDestType","EncodeSingleElement","IEEE754LIB","ParseSingleElement","StringToBuffer","encodeSingleElement","stringToBuffer","SDTDataTypes","EncodeHeader","encodeHeader","tag","valueLen","byte0","strSdtLen","Stream","EncodeInteger","int48ToStr","vIn","byteI","floor","EncodeSingleElementLib","UtilLib","EncodeMap","encodeMap","sdtmap","buf","sdtfield","strKeyField","strKeyName","nullTerminate","encodeSingleElementToBuf","DestinationLib","EncodeStream","encodeStream","C_2_48","pow","strencode","fieldVal","BOOL","Boolean","UINT8","UnsignedInteger","INT8","Integer","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","Char","ByteArray","FLOATTYPE","Float","toIEEE754Single","DOUBLETYPE","toIEEE754Double","NULLTYPE","Null","UNKNOWN","hdr","sdtstream","toIEEE754","ebits","fbits","bias","Infinity","abs","ln","LN2","bits","parseInt","fromIEEE754","j","NaN","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","ParseDestination","parseDestination","dataBuf","destType","readUInt8","destBytes","create","ParseInteger","autoDecodeVarLengthNumber","ParseFieldHeader","parseFieldHeader","onebyte","elemType","lenBytes","elemLen","elemValLen","ParseFloat","parseFloatField","readFloatBE","readDoubleBE","createField","readUIntBE","parseIntegerField","isSigned","readInt8","readInt16BE","readUInt16BE","readInt32BE","longValue","getNumBitsAbs","toNumber","field","setError","ParseSingleElementLib","ParseMap","parseMapAt","datalen","mapObj","keyFieldHeader","keyString","valueFieldHeader","valueField","addField","ParseStream","parseStreamAt","fieldHeader","SMFMessage","SMF_MESSAGE","streamObj","validateSdtField","_value","getValueNoThrow","_map","deleteField","typeOrField","SDTFieldLib","_stream","_writable","_readPt","sourceData","inspect","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","baseTypes","failInvalidParameter","valueType","instanceOf","ClientCapabilityType","ProvisionEvent","SessionEventName","createSession","sessionProperties","messageCallbackInfo","eventCallbackInfo","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","NO_LOCAL","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_PUBLISH","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","SELECTOR","ACTIVE_CONSUMER_INDICATION","COMPRESSION","CUT_THROUGH","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","COMPRESSED_SSL","VAR_LEN_EXT_PARAM","UNBIND_ACK","BR_ERRORID","PQ","CorrelatedRequest","timer","respRecvdCallback","DefaultCapabilities","createDefaultCapabilities","defaultCapabilities","assumedMaxAdSize","Process","C_2_32","leftPad","generateRandomId","rand","random","toFixed","GlobalContext","sessionCounter","idCounter","RandId","NextSessionCounter","NextId","GenerateClientName","product","platform","GenerateUserIdentification","GenerateClientDescription","parseURL","hostListDNSFilter","urls","cb","host","url","address","resolved","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","hosts","href","connectTryCount","reconnectTryCount","connectTryCountPerHost","_mutableState","resolveHosts","succeeded","code","syscall","hostname","wasConnected","disconnected","hostPointer","hostTries","listTries","exhausted","lastHostInfo","getNextHost","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","currentHostToString","hostNumber","messageRxCBFunction","userObject","CLIENT_NAME","CLIENT_DESCRIPTION","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","P2PUtil","getP2PInboxTopic","getP2PTopicSubscription","sessionEventCode","sessionEventCBFunction","UP_NOTICE","REJECTED_MESSAGE_ERROR","PROPERTY_UPDATE_OK","PROPERTY_UPDATE_ERROR","CAN_ACCEPT_DATA","DISCONNECTED","RECONNECTING_NOTICE","RECONNECTED_NOTICE","REPUBLISHING_UNACKED_MESSAGES","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","GUARANTEED_MESSAGE_PUBLISHER_DOWN","PROVISION_ERROR","PROVISION_OK","CONNECT_TIMEOUT","CONNECT_WAIT_TIMEOUT","DOWNGRADE_TIMEOUT","TRANSPORT_UP","TRANSPORT_DESTROYED","TRANSPORT_CAN_ACCEPT_DATA","TRANSPORT_PARSE_ERROR","TRANSPORT_PROTOCOL_SMP","TRANSPORT_PROTOCOL_CLIENTCTRL","EXCEPTION","SUBSCRIBE_TIMEOUT","CREATE_SUBSCRIBER","SEND_ERROR","FLOWS_DISCONNECTED","TRANSPORT_FLUSHED","DNS_RESOLUTION_COMPLETE","TRANSPORT_CHANGE_DONE","buildType","Superclass","superclassArgs","_sessionEventCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","rc","ck","TYPE_CACHE","build","superclassArgsBuilder","SessionFSMEvent","eventText","eventReason","smfMsg","sessionId","guaranteedFlowObject","ConsumerLib","PublisherLib","TransportLib","SessionRequestType","SessionStateName","StatsByMode","SubscriptionUpdateTimeoutMessages","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","fflate","SessionFSM","session","stats","logFormatter","_sessionProperties","_sessionStatistics","_hosts","_consumers","_flowInterfaceFactory","send","enqueueOutstandingCorrelatedReq","_userBackpressured","clearCurrentError","SessionDisconnected","sEvent","disposeInternal","SessionConnecting","CONNECTING","handleTransportDestroyed","clearConnectTimer","_currentHost","connectWaitTimeInMsecs","_connectWaitTimer","WaitingForInterConnectTimeout","WaitingForTransport","setConnectTimer","_connectFailEvent","_connectSuccessEvent","DestroyingTransport","_reconnectRetries","_currentError","emitSessionEvent","setCurrentError","WaitingForDNS","sessionEvent","errEvent","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","_transport","sendClientCtrlLogin","WaitingForLogin","WAITING_FOR_LOGIN","setClientCtrlTimer","clientCtrlMsg","getResponse","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","rawSubcode","responseString","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","newTransport","updateTransportCompression","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","subscriptionStr","encodedUtf8Subscription","DestroyTransport","canConnectPublisher","_defaultPublisher","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","canConnectConsumer","flows","sendConsumerSessionUpEvent","reconnectingFlows","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","isGathering","adaptedListenForDestroy","installfn","downEvents","known","pending","onFlowDown","checkPendingFlows","proceed","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","addToSubscriptionCache","_subscriptionCache","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","_correlatedReqs","req","_clientCtrlTimer","_connectTimer","_keepAliveTimer","resetKeepAliveCounter","noLocalSupported","caps","getRouterCapabilities","_compressedTLS","checkSessionDestinationCapability","_subscriptionCacheKeys","p2pTopic","p2pInboxBase","createMessagePublisher","publisherProperties","isAD","createMessageConsumer","createQueueBrowser","destroy","_smfClient","operations","_kaStats","removeFromSubscriptionCache","operationKey","sendEvent","reqTimeoutCb","reqTimeout","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","flush","nextCorrelationTag","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","pm_corrtag","updateRxStats","cancelledRequest","RX_REPLY_MSG_DISCARD","handleADTrMessage","pm_ad_flowid","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","replace","handleSMFMessage","discardMessage","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","request","confirm","handleSubscriptionTimeout","handleTransportEvent","transportEvent","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","GuaranteedFlowControlledRelief","PARSE_FAILURE","TSESSION","messageType","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","payloadCompressionLevel","anything","compressedAttachment","origSize","Z_FINISH","encodedContainer","textEncoded","zlibSync","_compressedCE","deliveryMode","adLocallyDisabled","_gmSendDisallowed","requestConfirmation","topicDestination","sendSubscribe","sub","keepAliveIntervalInMsecs","statTarget","forceAllowEnqueue","content","encodeCompoundMessage","updateTxStats","compressionLevel","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","getUpdate","provisionEndpoint","queueDescriptior","deprovisionEndpoint","getDelete","transportDowngradeTimeoutInMsecs","subscriptionUpdate","subject","requestType","force","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","generateMessage","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","TX_REQUEST_SENT","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","updateCapabilities","gmCap","_getCapability","oldName","newName","severTls","startCompression","SessionOperation","CTRL","SEND","QUERY_OPERATION","valArrayIsMember","valLength","valNotEmpty","valString","valStringOrArray","ALLOWED_PROTOCOLS","valClientName","validateClientName","enumInstance","allowNull","valUrlList","valArray","included","protocol","isHttpTransport","transportProtocol","HTTP_BINARY_STREAMING","HTTP_BINARY","HTTP_BASE64","validatePropsSupportedByTransport","nonHttpPropsSet","propNames","matchUrl","regex","all","arrayLength","currententry","string","useSsl","SessionPropertiesValidator","webTransportProtocolList","useClientCert","authenticationScheme","equal","empty","idToken","accessToken","nonHTTPTransportPropsSet","recommendedMin","defaultConnectTimeoutInMsecs","connectTimeout","transportCount","makeDefaults","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_tpProtocolInUse","_tpContentType","_publisherProperties","_payloadCompressionLevel","SessionPropertiesBrowser","_tpProtocol","_tpDowngradeTimeout","_transportProtocolList","_bufferedAmountQueryInterval","_setTransportProtocolInUse","_setWebTransportProtocolInUse","_lendsInspect","bufferedAmountQueryIntervalInMsecs","transportContentType","transportProtocolInUse","SessionPropertiesBase","_authScheme","_accessToken","_idToken","_issuerIdentifier","_url","_password","_userName","_clientName","_appDesc","_vpnName","_connectTimeout","minTimeout","margin","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","_genSendTimestamps","_genReceiveTimestamps","_includeSenderId","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","_setUserIdentification","_subLocalPriority","_subNetworkPriority","_ignoreDupSubError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","_sendBufferMaxSize","_assumedMaxAdSize","_maxWebPayload","issuerIdentifier","password","userName","clientName","applicationDescription","vpnName","vpnNameInUse","generateSendTimestamps","generateReceiveTimestamps","includeSenderId","generateSequenceNumber","p2pInboxInUse","userIdentification","subscriberLocalPriority","subscriberNetworkPriority","ignoreDuplicateSubscriptionError","sendBufferMaxSize","maxWebPayload","REMOVE_P2PINBOX","SESSION_ERROR","TRANSPORT_FAIL","CONNECTED","MessageLib","CACHE_REQUEST_PREFIX","transportProtocolDefaultList","WS_BINARY","xhrBinary","streaming","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","selectedProtocol","defaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","statesCanAck","stateName","subscribe","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","createFromSpec","handleDTEUnsubscribeResponse","updateProperty","responseCallback","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","resp","smpResp","afterRemoveCallback","ignoreSubscriptionNotFoundError","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","getSessionProperties","_failOnExtendedVariableLengthProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","sessionState","getSessionState","getTransportProtocol","capabilityType","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","ignoreExists","queueDescriptor2","handleProvisionResponse","ignoreMissing","provision","getQueueNameBytes","getDurability","outcome","provisionEvent","browserProperties","destinationType","factoryMethod","vrn","localName","operationEnum","allow","NEW","routerCapabilities","sendDest","senderTimestamp","noSenderTimestamp","hasAutoSenderTimestamp","now","sequenceNumber","noSequenceNumber","hasAutoSequenceNumber","senderId","noSenderId","reqFailedCb","replyRecvdCb","none","TX_REQUEST_TIMEOUT","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","RX_REPLY_MSG_RECVED","requestConfirm","adCtrlMessage","getEventCBInfo","setEventCBInfo","eventCBInfo","getMessageCBInfo","setMessageCBInfo","messageCBInfo","rfu","buildErrorEvent","object","CodecLib","BinaryMetaBlock","SMFAdProtocolParam","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","SMFSMPMessageType","SMFSMPMessageTypeFlags","SMFTransportSessionMessageType","SMFParameter","setBits","parseAdpAt","adpVersion","twobyte","paramUH","paramType","paramLen","paramValueLen","smfParam","addParameter","encAdp0Param","uh","paramtype","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","RSValueLenMap","encAdpReplayParam","valType","valObj","encAdp64AckPairParam","paramLength","encAdpUTF8NTParam","byte2","encAdp","paramspace","paramarray","getParameterArray","param","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","getUh","EP_BEHAVIOUR","PARTITION_GROUP_ID","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","settlementRanges","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","APPLICATION_PUB_ACK","paramdata","threebytes","padBytes","twobytes","ContentSummaryType","ParamParse","ParseSMF","parseCCAt","payloadLen","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","ContentSummaryElement","position","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","SolclientDestinationLib","SolclientMessageLib","SolclientSDTLib","PriorityUserCosMap","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","payload","preambleByte0","preambleByte1","h","headerMap","ci","mi","mt","rt","si","sn","ts","ce","ct","bag","ctx","_baggageObj","fromTraceContext","adaptSmfToMessage","stream","smf_dto","smf_elidingEligible","smf_deadMessageQueueEligible","smf_priority","pm_msg_priority","pm_userdata","pm_ad_redelflag","pm_ad_flowredelflag","pm_ad_msgid","pm_ad_prevmsgid","pm_ad_publisherid","pm_ad_publishermsgid","pm_ad_topicSequenceNumber","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","pm_ad_replication_mate_ack_message_id","pm_ad_local_spooler_message_id","pm_ad_ttl","pm_ts_transport_context","payloadOffset","headerLength","cs","pm_content_summary","payloadLength","currentChunk","chunkBegin","chunkEnd","fromEncodedSmf","binaryMetadataChunk","endsWith","inflatedAttachment","unzlibSync","newCE","trimRight","payloadPosition","SMFHeader","base64Encode","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","FORCED_LENGTH_MODE","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","adaptMessageToBinaryMeta","sdtPreamble","sdtStreamContainer","adaptMessageToSmf_nonPayload","smfHeaderIn","pm_ad_publishermsgId","pm_ad_ackimm","pm_queue_len","pm_queue_offset","userData","encodedSdtPayload","binaryMetaSMF","asEncodedSmf","MAX_24BITS","adaptMessageToSmf_payloadFinalize","payloadBytes","adaptMessageToSmf","bitRange","maskValues","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_uh","smf_ttl","params","TR_TOPICNAME","LIGHT_QUEUE_NAME_OFFSET","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","TS_TRANSPORT_CONTEXT","SIX","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","setPayloadSize","encodedHeader","SMFUH","delModeEnumBidiMap","lutDelModeToEnum","lutEnumToDelMode","uhTypeMap","paramTypeBits","paramTypeCount","lenMap","idx","lightMap","lenBits","lenCount","ContentSummaryDecodeMap","FIVE","parseTopicQueueOffsets","parseResponseParam","parseDeliveryMode","delmode","lookup","lut","parseContentSummary","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","cst","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","forcedLengthMode","lengthModeMap","0","1","2","4","8","lengthMode","lengthString","base64Decode","isSMFHeaderAvailable","remaining","isSMFHeaderValid","isSMFAvailable","totalLen","parseSMFExtendedStream","streamLen","pUH","3","AD_REDELIVERY_COUNT","AD_SPOOLER_UNIQUE_ID","AD_ACK_MESSAGE_ID","AD_REPL_MATE_ACK_MSGID","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","paramIsLightweight","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parsedTopicOffsets","pStart","pType","pLen","pValueLen","parsedResponse","SUB_ID_LIST","GENERIC_ATTACHMENT","AD_TOPICSEQUENCE_NUMBER","contentSummary","AD_FLOWREDELIVERED_FLAG","extSuccess","ADDSUBSCRIPTION","REMSUBSCRIPTION","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","msgFlags","smpFlags","queueLength","encodedUtf8QueueName","subsLength","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","CREATE_RESP","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","BaseMessage","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DUARBILITY_INT_TO_BOOL","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","IGNORE","discardBehaviorValue","_readParameter","decoder","bufMethod","getParameter","getBuffer","getBegin","masked","ENDPOINT_ID","GRANTED_PERMISSIONS","getLastMsgIdReceived","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","REJECT","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","hasNackSupport","endpointBytes","endpointType","rsValue","replayStartTimeMs","replayStartTimeNs","multiply","UNSUBSCRIBE","lastMessageIdAcked","applicationAckRanges","allOutcomes","_parameters","bufSmf","chunkCount","fourbyte","SMFClientCtrlAuthType","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","dto","local","network","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","sanityLoop","capLen","sprop","compressedTLS","plaintextTLS","clientCapsToStr","clientCapList","highestCap","capBits","cap","cc","isClientCert","DELIVERTOONEPRIORITY","prmGetDtoPriorityValue","CLIENTDESC","AUTHENTICATION_SCHEME","CLIENTNAME","formattedDate","SSL_DOWNGRADE","clientCaps","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","appdesc","strName","encodeResult","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","begin","_uh","_begin","getEnd","SMF_SMP_FLAG_TOPIC","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","smp","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_PERSIST","TRANSACTIONCTRL","XACTRL","TRANSPORT_PRIORITY","LINGER_OPTION","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","PADDING","PARTITION_KEY_HASH","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_DELIVERALWAYS","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","DESTROY","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","CacheContext","CacheRequest","cacheCBFunction","getCallback","getUserObject","cacheRequestCorrelationId","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","FULFILL","FLOW_THRU","_returnCode","_subcode","_topic","getReturnCode","getReturnSubcode","getTopic","getError","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","cacheSession","cacheMessageType","requestID","cbInfo","liveDataAction","cacheName","subscriptionWaiting","replyReceived","dataReceived","correlationID","childRequests","parentRequest","queuedLiveData","liveDataFulfilled","timeoutHandle","getRootRequest","addChild","childIn","child","removeChild","childIndex","collapse","clearRequestTimeout","getRequestID","getCBInfo","getLiveDataAction","startRequestTimeout","cacheSessionTimeoutCB","timeoutMsec","VERSION","DEFAULT_REPLY_SIZE_LIMIT","REPLY_SIZE_LIMIT","FAIL","INCOMPLETE","REQUEST_COMPLETE","LIVE_DATA_FULFILL","ERROR_RESPONSE","INVALID_SESSION","REQUEST_ALREADY_IN_PROGRESS","NO_DATA","SUSPECT_DATA","CACHE_SESSION_DISPOSED","maxAgeSec","maxMessages","includeOtherClusters","cachePrefix","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","CacheSessionSubscribeInfo","SessionLib","noOp","privateInterface","_validateProps","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","_handleMessage","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","passEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","_getOutstandingRequest","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","_startCacheRequest","_terminateRequest","_checkRequestCompletion","parent","_unregisterRequest","_sendSeeOther","cacheGetResult","clusterName","childRequest","_registerRequest","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","streamField","_incStat","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","_decodeMessageStream","RX_CACHE_MSG","exception","checkCID","_performLiveDataAction","_fulfillRequest","_trackCompletionStats","_notifyCallback","toTerminate","sendCacheRequest","arguments","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","suppressClusters","round","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","innerMessage","cacheRequest","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_PERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","RX_DIRECT_MSGS","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_MSGS","RX_DIRECT_BYTES","RX_PERSISTENT_BYTES","RX_NONPERSISTENT_BYTES","TX_WINDOW_CLOSE","_parent","_statsMap","TransportSessionStates","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","concatFrom","allocUnsafe","buf0","copy","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","BufferQueue","maxSize","_queue","_maxSize","peekView","oIndex","put","adaptData","advance","done","chunk","SMF_LOST_FRAMING_THRESHOLD","logPeekBuffer","bufPair","BufferSMFClient","_incomingBuffer","rxDataString","_rxDataCB","rxDataArrayBuffer","rxDataBuffer","putSuccess","messageLen","msgBuffer","_sessionId","TransportBase","eventCB","client","transportProps","_ssl","_client","_eventCB","_props","immediate","forceFailure","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","useSSL","WebTransportCapabilities","TransportClientStats","TcpRawTransport","CompressedTransport","TlsOnlyTransport","TcpTlsTransport","WebTransport","getId","compressingLayer","plaintextTransport","setClientStats","setUnderlyingTransport","tlsLayer","uncompressedTransport","rehome","encryptedTransport","compress","tlsShutdown","precallback","WebTransportsLib","lutTransportProtocols","protocols","StateBase64","StateBinary","StateStreamingAndBinary","StateWebSocketBinary","TransportProtocolHandler","transport","downgradeTransport","TransportConstructor","switchState","onEnter","completeDowngrade","canCompleteDowngrade","getNextState","newState","INVALID_STATE_FOR_OPERATION","DOWNGRADE_FAILED","DOWNGRADE_SUCCEEDED","TransportSessionEvent","tsEventCode","_transportEventCode","_sid","getResponseCode","transportEventCode","TransportSessionState","WAITING_FOR_CREATE","WAITING_FOR_DESTROY","CONNECTION_FAILED","TSHState","tpProtocol","exitCallback","nextState","_transportProtocol","_exitCallback","_nextState","_unsupportedRuntimeMessage","userAgent","setNextState","getUseSsl","validateLegal","HTTPLib","HTTPConnection","HTTPTransportSession","sendXhrBinary","sendXhrText","TimingBucket","XHRFactory","SOL_CONNECTION_DEBUG","prependOrigin","location","origin","getTs","WaitedToken","HadToken","ReturnedToken","bucketCount","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","browserSupportsXhrBinary","recStat","LastGotToken","LastSendMsg","waitedTok","hadToken","LastGotData","LastReturnToken","returnedToken","attempt","maxRetry","abort","open","onreadystatechange","xhrStateChange","setRequestHeader","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","status","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","xhr","check","onprogress","WebTransportSessionBase","PacketReadState","READING_HEADER","STREAMING","MSIE_TRANSPORT_PADDING","adaptURL","baseUrl","_haveToken","_confMaxWebPayload","_maxPayloadBytes","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_packetReadState","agent","navigator","_contentType","connectTimerExpiry","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","_state","connectInternal","_connError","_createConn","handleCreateConnFailure","createMsg","createConnectTimeout","connError","cancelConnectTimeout","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","_queuedData","enqueueData","remainder","allowEnqueue","enqueueFailNoSpace","transportPacketLen","_smfDataTSHeaderParts","_clientstats","_queuedDataSize","initPreformattedHeaders","_flushCallback","sendQueuedData","getQueuedDataToSend","_canSendNeeded","tsRc","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","handleRxError","errorInfo","asyncSendEvent","finalize","sendXhrBinaryMSIE10","overrideMimeType","sendXhrBinaryXHR2","connClose","allowFail","XMLHttpRequest","exitCb","WebSocketTransportSession","browserSupportsBinaryWebSockets","browserSupportsStreamingResponse","WebTransportEvent","DOWNGRADE","WebTransportState","WebTransportFSM","transportIn","WebTransportDown","wEvent","WebTransportConnecting","destroyInternal","_destroyMsg","WebTransportDestroying","getConnError","_eventReason","notifyEvent","_transportEvent","attemptDowngrade","WebTransportUp","WebTransportDowngrading","DOWNGRADING","notifyDowngradeFailed","_downgradeMsg","DESTROYING","tsEvent","MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS","bytesAllowed","getBufferedAmount","_bufferedAmountQueryIntervalInMsecs","_bufferedAmountQueryIntervalDelayMultiplier","elemLength","_transportHandler","_webTransportFsm","handleDestroyed","_transportSession","_lastDowngradeSucceeded","errorMsg","_socket","_sender","WebSocketCloseCodes","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","globalContext","MyWebSocket","WebSocket","_bufferedAmountQueryTimer","onOpen","onClose","originalSocket","msgBuf","wasClean","onDrain","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","onError","WAITING_FOR_CONNECT","onMessage","binaryType","onopen","onmessage","onclose","onerror","bufferAllow","maxPayloadBytes","close","cancelQuery","bufferedAmount","validator","validatorArgs","typeInstance","typeInstanceDesc","boolean","allowUndefined","allowEmpty","allowDuplicate","ele","valArrayOfString","typedesc","cloneObj","CLONE_CIRCULAR","CLONE_DEPTH","acc","scope","hasWorkingUrl","forceJURL","u","URL","pathname","relative","relativePathDotMapping","_scheme","_schemeData","_username","_host","_port","_path","_query","_fragment","_isInvalid","_isRelative","isRelativeScheme","scheme","IDNAToASCII","percentEscape","unicode","percentEscapeQuery","EOF","ALPHA","ALPHANUMERIC","stateOverride","errors","cursor","seenAt","seenBracket","loop","nextC","nextNextC","cp","tempC","temp","PolyfillURL","authority","port","search","hash","OriginalURL","createObjectURL","revokeObjectURL","_instanceof","nativeMap","nativeSet","nativePromise","Promise","depth","allParents","allChildren","useBuffer","_clone","proto","reject","then","__isArray","__isRegExp","RegExp","__getRegExpFlags","__isDate","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","allPropertyNames","propertyName","clonePrototype","emptyCloneFunc","__objToStr","regExpOptions","global","ignoreCase","multiline","WINDOWS_VERSION_MAP","DEFAULT","BROWSER_PROCESS","getBrowserAgentInfo","navObj","agentStr","browsers","agentInfo","os","arch","agentHas","strs","firstValue","vals","rule","exec","versionStrs","versionTests","parenParts","versionPart","versionMatch","versionTest","safeEncode","browserAgentInfo","arg","PAD_LEFT","PAD_RIGHT","LUT_PRINTABLE","padLeftRight","minLen","padSide","padChar","leastSpaces","spaces","capitalizeWord","isEmptyFun","capitalize","lastChar","hexdump","printable","spacer","linelen","sLength","heredoc","literals","substitutions","subst","buckets","normalized","cont","MODE","TARGET","FORMATTED_DATE","pad","YYYY","SUMMARY","EPSILON","BaseChecks","instanceOfAny","types","truthy","fn","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","rangeCompare","operator","operand","epsilon","expected","member","function","orNull","orUndefined","orNothing","thenGen","doOp","elseFn","when","condition","unless","NO_OBJ","objectValues","subcodeSummary","got","expectedStr","gotStr","validateError","typename","memberOfEnum","names","isEnumMemberOrNothing","isInstanceOfOrNull","isInstanceOfOrUndefined","isMember","memberOf","isNumberOrNull","isRangeCompare","isStringOrNull","toByteArray","fromByteArray","revLookup","Arr","getLens","b64","validLen","placeHoldersLen","lens","_byteLength","curByte","tripletToBase64","num","encodeChunk","uint8","extraBytes","parts","maxChunkLength","len2","opts","seen","stylize","stylizeNoColor","colors","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styles","styleType","style","isNull","hasOwn","prop","isRegExp","re","isObject","objectToString","isError","isDate","o","arrayToHash","formatArray","recurseTimes","visibleKeys","l","formatProperty","formatError","primitive","formatPrimitive","braces","toUTCString","reduceToSingleString","JSON","stringify","simple","prev","cur","numLinesEst","base64","ieee754","customInspectSymbol","Symbol","SlowBuffer","INSPECT_MAX_BYTES","K_MAX_LENGTH","kMaxLength","TYPED_ARRAY_SUPPORT","typedArraySupport","foo","setPrototypeOf","createBuffer","RangeError","encodingOrOffset","TypeError","poolSize","isView","fromArrayView","isInstance","fromArrayBuffer","SharedArrayBuffer","fromObject","toPrimitive","assertSize","alloc","checked","allocUnsafeSlow","isEncoding","actual","write","fromArrayLike","arrayView","numberIsNaN","_isBuffer","y","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","swap16","swap32","swap64","toLocaleString","thisStart","thisEnd","thisCopy","targetCopy","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","read","foundIndex","found","hexWrite","strLen","parsed","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","utf16leToBytes","isFinite","toJSON","res","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","MAX_ARGUMENTS_LENGTH","codePoints","out","hexSliceLookupTable","newBuf","checkOffset","ext","readUintLE","readUIntLE","noAssert","mul","readUintBE","readUint8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","lo","hi","BigInt","readBigUInt64BE","readIntLE","readIntBE","readInt16LE","readInt32LE","readBigInt64LE","readBigInt64BE","readFloatLE","readDoubleLE","checkInt","writeUintLE","writeUIntLE","maxBytes","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","checkIEEE754","writeFloat","littleEndian","writeFloatLE","writeFloatBE","writeDouble","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","E","sym","getMessage","Base","received","isInteger","addNumericalSeparator","checkBounds","ERR_OUT_OF_RANGE","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","INVALID_BASE64_RE","base64clean","units","leadSurrogate","src","dst","alphabet","table","i16","BufferBigIntNotDefined","R","Reflect","ReflectApply","receiver","ReflectOwnKeys","ownKeys","ProcessEmitWarning","warning","NumberIsNaN","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","setMaxListeners","_getMaxListeners","that","getMaxListeners","doError","events","er","handler","listeners","arrayClone","_addListener","prepend","newListener","unshift","warned","w","onceWrapper","fired","wrapFn","_onceWrap","wrapped","originalListener","spliceOne","off","_listeners","unwrap","evlistener","unwrapListeners","rawListeners","eventNames","errorListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","addEventListener","wrapListener","removeEventListener","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","ch2","node_worker_1","transfer","Worker","ed","$e$","postMessage","u16","i32","Int32Array","fleb","fdeb","clim","freb","eb","_a","fl","revfl","_b","fd","revfd","rev","hMap","cd","mb","le","co","rvb","sv","r_1","flt","fdt","flm","flrm","fdm","fdrm","bits16","shft","slc","FlateErrorCode","UnexpectedEOF","InvalidBlockType","InvalidLengthLiteral","InvalidDistance","StreamFinished","NoStreamHandler","InvalidHeader","NoCallback","InvalidUTF8","ExtraFieldTooLong","InvalidDate","FilenameTooLong","StreamFinishing","InvalidZipData","UnknownCompressionMethod","ec","ind","nt","inflt","dat","st","dict","sl","dl","noBuf","resize","noSt","cbuf","bl","nbuf","bt","lm","dm","lbt","dbt","tbts","t","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","dt","lms","dms","lpos","dsym","dend","wbits","wbits16","hTree","t2","et","i0","i1","i2","maxSym","tr","mbt","lft","i2_1","i2_2","i2_3","lc","cl","cli","cln","cls","clen","cf","wfblk","wblk","syms","lf","df","li","bs","dlt","mlb","ddt","mdb","_c","lclt","nlc","_d","lcdt","ndc","lcfreq","_e","lct","mlcb","nlcc","flen","ftlen","dtlen","ll","llm","lcts","it","clct","deo","dflt","lvl","plvl","pre","post","z","ceil","lst","opt","msk_1","head","bs1_1","bs2_1","hsh","lc_1","wi","hv","imod","pimod","rem","ch_1","dif","maxn","maxd","ml","nl","mmd","md","ti","pti","lin","din","crct","crc","cr","adler","dopt","dictionary","newDat","mem","mrg","wcln","fnStr","td","ks","st_1","spInd","ch","cbfs","wrkr","fns","td_1","bInflt","inflateSync","pbf","gopt","bDflt","deflateSync","gze","gzh","gzhl","wbytes","guze","gzs","gzl","zle","zlh","zule","zls","cbify","consume","astrm","strm","ondata","astrmify","b2","b4","b8","filename","mtime","flg","zs","lv","StrmOpt","Deflate","endLen","AsyncDeflate","deflate","Inflate","bts","AsyncInflate","inflate","Gzip","raw","Compress","AsyncGzip","AsyncCompress","gzip","gzipSync","compressSync","Gunzip","onmember","AsyncGunzip","_this_1","gunzip","gunzipSync","Zlib","AsyncZlib","zlib","Unzlib","AsyncUnzlib","unzlib","Decompress","G","I","Z","_this_2","AsyncDecompress","decompress","decompressSync","fltn","op","te","TextEncoder","TextDecoder","tds","dutf8","DecodeUTF8","EncodeUTF8","strToU8","latin1","ar_1","ar","ai","strFromU8","dbf","slzh","zh","fnl","es","z64e","sc","su","exfl","wzh","extra","col","exl","flag","compression","exf","wzf","ZipPassThrough","ZipDeflate","AsyncZipDeflate","Zip","file","fl_1","com","comment","hl_1","chks_1","pAll_1","_i","chks_2","chk","tr_1","ind_1","uf_1","nxt","cl_1","dd","zip","tot","slft","files","term","tAll","cbd","cbf","oe","cdl","badd","loc","_loop_1","cbl","zipSync","UnzipPassThrough","UnzipInflate","AsyncUnzipInflate","sz","Unzip","onfile","toAdd","is","oc","_loop_2","sig","this_1","bf","cmp_1","chks_3","sc_1","su_1","fn_1","d_1","file_1","ctr","chks_4","originalSize","state_1","register","queueMicrotask","unzip","ze","fltr","_loop_3","c_1","no","infl","unzipSync","c_2","wasm","WebAssembly","Instance","Module","unsigned","__isLong__","ctz32","clz32","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiplier","divide","divisor","approx","halfThis","shr","shl","toUnsigned","shru","log2","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","fromBytes","fromBytesLE","fromBytesBE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis","__webpack_exports__"],"sourceRoot":""}